# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby_llm` gem.
# Please instead update this file by running `bin/tapioca gem ruby_llm`.


# A delightful Ruby interface to modern AI language models.
#
# source://ruby_llm//lib/ruby_llm.rb#33
module RubyLLM
  class << self
    # source://ruby_llm//lib/ruby_llm.rb#43
    def chat(*_arg0, **_arg1, &_arg2); end

    # source://ruby_llm//lib/ruby_llm.rb#67
    def config; end

    # @yield [config]
    #
    # source://ruby_llm//lib/ruby_llm.rb#63
    def configure; end

    # @yield [context_config]
    #
    # source://ruby_llm//lib/ruby_llm.rb#37
    def context; end

    # source://ruby_llm//lib/ruby_llm.rb#47
    def embed(*_arg0, **_arg1, &_arg2); end

    # source://ruby_llm//lib/ruby_llm.rb#71
    def logger; end

    # source://ruby_llm//lib/ruby_llm.rb#55
    def models; end

    # source://ruby_llm//lib/ruby_llm.rb#51
    def paint(*_arg0, **_arg1, &_arg2); end

    # source://ruby_llm//lib/ruby_llm.rb#59
    def providers; end
  end
end

# Manages model aliases for provider-specific versions
#
# source://ruby_llm//lib/ruby_llm/aliases.rb#5
class RubyLLM::Aliases
  class << self
    # source://ruby_llm//lib/ruby_llm/aliases.rb#17
    def aliases; end

    # source://ruby_llm//lib/ruby_llm/aliases.rb#21
    def aliases_file; end

    # source://ruby_llm//lib/ruby_llm/aliases.rb#25
    def load_aliases; end

    # source://ruby_llm//lib/ruby_llm/aliases.rb#33
    def reload!; end

    # source://ruby_llm//lib/ruby_llm/aliases.rb#7
    def resolve(model_id, provider = T.unsafe(nil)); end
  end
end

# A class representing a file attachment.
#
# source://ruby_llm//lib/ruby_llm/attachment.rb#5
class RubyLLM::Attachment
  # @return [Attachment] a new instance of Attachment
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#8
  def initialize(source, filename: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#37
  def active_storage?; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#81
  def audio?; end

  # source://ruby_llm//lib/ruby_llm/attachment.rb#45
  def content; end

  # source://ruby_llm//lib/ruby_llm/attachment.rb#64
  def encoded; end

  # Returns the value of attribute filename.
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#6
  def filename; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#77
  def image?; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#33
  def io_like?; end

  # Returns the value of attribute mime_type.
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#6
  def mime_type; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#29
  def path?; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#85
  def pdf?; end

  # Returns the value of attribute source.
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#6
  def source; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#89
  def text?; end

  # source://ruby_llm//lib/ruby_llm/attachment.rb#93
  def to_h; end

  # source://ruby_llm//lib/ruby_llm/attachment.rb#68
  def type; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/attachment.rb#25
  def url?; end

  private

  # source://ruby_llm//lib/ruby_llm/attachment.rb#151
  def active_storage_content_type; end

  # source://ruby_llm//lib/ruby_llm/attachment.rb#99
  def determine_mime_type; end

  # source://ruby_llm//lib/ruby_llm/attachment.rb#136
  def extract_filename_from_active_storage; end

  # source://ruby_llm//lib/ruby_llm/attachment.rb#107
  def fetch_content; end

  # source://ruby_llm//lib/ruby_llm/attachment.rb#121
  def load_content_from_active_storage; end

  # source://ruby_llm//lib/ruby_llm/attachment.rb#116
  def load_content_from_io; end

  # source://ruby_llm//lib/ruby_llm/attachment.rb#112
  def load_content_from_path; end
end

# Error classes for different HTTP status codes
#
# source://ruby_llm//lib/ruby_llm/error.rb#22
class RubyLLM::BadRequestError < ::RubyLLM::Error; end

# Represents a conversation with an AI model
#
# source://ruby_llm//lib/ruby_llm/chat.rb#5
class RubyLLM::Chat
  include ::Enumerable

  # @return [Chat] a new instance of Chat
  #
  # source://ruby_llm//lib/ruby_llm/chat.rb#10
  def initialize(model: T.unsafe(nil), provider: T.unsafe(nil), assume_model_exists: T.unsafe(nil), context: T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#156
  def add_message(message_or_attributes); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#33
  def ask(message = T.unsafe(nil), with: T.unsafe(nil), &_arg2); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#124
  def complete(&_arg0); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#120
  def each(&_arg0); end

  # Returns the value of attribute headers.
  #
  # source://ruby_llm//lib/ruby_llm/chat.rb#8
  def headers; end

  # Returns the value of attribute messages.
  #
  # source://ruby_llm//lib/ruby_llm/chat.rb#8
  def messages; end

  # Returns the value of attribute model.
  #
  # source://ruby_llm//lib/ruby_llm/chat.rb#8
  def model; end

  # source://ruby_llm//lib/ruby_llm/chat.rb#105
  def on_end_message(&block); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#100
  def on_new_message(&block); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#110
  def on_tool_call(&block); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#115
  def on_tool_result(&block); end

  # Returns the value of attribute params.
  #
  # source://ruby_llm//lib/ruby_llm/chat.rb#8
  def params; end

  # source://ruby_llm//lib/ruby_llm/chat.rb#162
  def reset_messages!; end

  # source://ruby_llm//lib/ruby_llm/chat.rb#33
  def say(message = T.unsafe(nil), with: T.unsafe(nil), &_arg2); end

  # Returns the value of attribute schema.
  #
  # source://ruby_llm//lib/ruby_llm/chat.rb#8
  def schema; end

  # Returns the value of attribute tools.
  #
  # source://ruby_llm//lib/ruby_llm/chat.rb#8
  def tools; end

  # source://ruby_llm//lib/ruby_llm/chat.rb#70
  def with_context(context); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#82
  def with_headers(**headers); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#40
  def with_instructions(instructions, replace: T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#59
  def with_model(model_id, provider: T.unsafe(nil), assume_exists: T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#77
  def with_params(**params); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#87
  def with_schema(schema); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#65
  def with_temperature(temperature); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#47
  def with_tool(tool); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#53
  def with_tools(*tools, replace: T.unsafe(nil)); end

  private

  # source://ruby_llm//lib/ruby_llm/chat.rb#202
  def execute_tool(tool_call); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#184
  def handle_tool_calls(response, &_arg1); end

  # source://ruby_llm//lib/ruby_llm/chat.rb#208
  def instance_variables; end

  # source://ruby_llm//lib/ruby_llm/chat.rb#168
  def wrap_streaming_block(&block); end
end

# source://ruby_llm//lib/ruby_llm/chunk.rb#4
class RubyLLM::Chunk < ::RubyLLM::Message; end

# Global configuration for RubyLLM
#
# source://ruby_llm//lib/ruby_llm/configuration.rb#5
class RubyLLM::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#41
  def initialize; end

  # Returns the value of attribute anthropic_api_key.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def anthropic_api_key; end

  # Sets the attribute anthropic_api_key
  #
  # @param value the value to set the attribute anthropic_api_key to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def anthropic_api_key=(_arg0); end

  # Returns the value of attribute bedrock_api_key.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def bedrock_api_key; end

  # Sets the attribute bedrock_api_key
  #
  # @param value the value to set the attribute bedrock_api_key to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def bedrock_api_key=(_arg0); end

  # Returns the value of attribute bedrock_region.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def bedrock_region; end

  # Sets the attribute bedrock_region
  #
  # @param value the value to set the attribute bedrock_region to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def bedrock_region=(_arg0); end

  # Returns the value of attribute bedrock_secret_key.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def bedrock_secret_key; end

  # Sets the attribute bedrock_secret_key
  #
  # @param value the value to set the attribute bedrock_secret_key to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def bedrock_secret_key=(_arg0); end

  # Returns the value of attribute bedrock_session_token.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def bedrock_session_token; end

  # Sets the attribute bedrock_session_token
  #
  # @param value the value to set the attribute bedrock_session_token to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def bedrock_session_token=(_arg0); end

  # Returns the value of attribute deepseek_api_key.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def deepseek_api_key; end

  # Sets the attribute deepseek_api_key
  #
  # @param value the value to set the attribute deepseek_api_key to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def deepseek_api_key=(_arg0); end

  # Returns the value of attribute default_embedding_model.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def default_embedding_model; end

  # Sets the attribute default_embedding_model
  #
  # @param value the value to set the attribute default_embedding_model to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def default_embedding_model=(_arg0); end

  # Returns the value of attribute default_image_model.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def default_image_model; end

  # Sets the attribute default_image_model
  #
  # @param value the value to set the attribute default_image_model to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def default_image_model=(_arg0); end

  # Returns the value of attribute default_model.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def default_model; end

  # Sets the attribute default_model
  #
  # @param value the value to set the attribute default_model to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def default_model=(_arg0); end

  # Returns the value of attribute gemini_api_key.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def gemini_api_key; end

  # Sets the attribute gemini_api_key
  #
  # @param value the value to set the attribute gemini_api_key to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def gemini_api_key=(_arg0); end

  # Returns the value of attribute gpustack_api_base.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def gpustack_api_base; end

  # Sets the attribute gpustack_api_base
  #
  # @param value the value to set the attribute gpustack_api_base to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def gpustack_api_base=(_arg0); end

  # Returns the value of attribute gpustack_api_key.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def gpustack_api_key; end

  # Sets the attribute gpustack_api_key
  #
  # @param value the value to set the attribute gpustack_api_key to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def gpustack_api_key=(_arg0); end

  # Returns the value of attribute http_proxy.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def http_proxy; end

  # Sets the attribute http_proxy
  #
  # @param value the value to set the attribute http_proxy to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def http_proxy=(_arg0); end

  # source://ruby_llm//lib/ruby_llm/configuration.rb#58
  def instance_variables; end

  # Returns the value of attribute log_file.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def log_file; end

  # Sets the attribute log_file
  #
  # @param value the value to set the attribute log_file to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def log_file=(_arg0); end

  # Returns the value of attribute log_level.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def log_level; end

  # Sets the attribute log_level
  #
  # @param value the value to set the attribute log_level to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def log_level=(_arg0); end

  # Returns the value of attribute log_stream_debug.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def log_stream_debug; end

  # Sets the attribute log_stream_debug
  #
  # @param value the value to set the attribute log_stream_debug to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def log_stream_debug=(_arg0); end

  # Returns the value of attribute logger.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def logger=(_arg0); end

  # Returns the value of attribute max_retries.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def max_retries; end

  # Sets the attribute max_retries
  #
  # @param value the value to set the attribute max_retries to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def max_retries=(_arg0); end

  # Returns the value of attribute mistral_api_key.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def mistral_api_key; end

  # Sets the attribute mistral_api_key
  #
  # @param value the value to set the attribute mistral_api_key to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def mistral_api_key=(_arg0); end

  # Returns the value of attribute ollama_api_base.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def ollama_api_base; end

  # Sets the attribute ollama_api_base
  #
  # @param value the value to set the attribute ollama_api_base to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def ollama_api_base=(_arg0); end

  # Returns the value of attribute openai_api_base.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openai_api_base; end

  # Sets the attribute openai_api_base
  #
  # @param value the value to set the attribute openai_api_base to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openai_api_base=(_arg0); end

  # Returns the value of attribute openai_api_key.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openai_api_key; end

  # Sets the attribute openai_api_key
  #
  # @param value the value to set the attribute openai_api_key to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openai_api_key=(_arg0); end

  # Returns the value of attribute openai_organization_id.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openai_organization_id; end

  # Sets the attribute openai_organization_id
  #
  # @param value the value to set the attribute openai_organization_id to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openai_organization_id=(_arg0); end

  # Returns the value of attribute openai_project_id.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openai_project_id; end

  # Sets the attribute openai_project_id
  #
  # @param value the value to set the attribute openai_project_id to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openai_project_id=(_arg0); end

  # Returns the value of attribute openai_use_system_role.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openai_use_system_role; end

  # Sets the attribute openai_use_system_role
  #
  # @param value the value to set the attribute openai_use_system_role to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openai_use_system_role=(_arg0); end

  # Returns the value of attribute openrouter_api_key.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openrouter_api_key; end

  # Sets the attribute openrouter_api_key
  #
  # @param value the value to set the attribute openrouter_api_key to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def openrouter_api_key=(_arg0); end

  # Returns the value of attribute perplexity_api_key.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def perplexity_api_key; end

  # Sets the attribute perplexity_api_key
  #
  # @param value the value to set the attribute perplexity_api_key to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def perplexity_api_key=(_arg0); end

  # Returns the value of attribute request_timeout.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def request_timeout; end

  # Sets the attribute request_timeout
  #
  # @param value the value to set the attribute request_timeout to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def request_timeout=(_arg0); end

  # Returns the value of attribute retry_backoff_factor.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def retry_backoff_factor; end

  # Sets the attribute retry_backoff_factor
  #
  # @param value the value to set the attribute retry_backoff_factor to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def retry_backoff_factor=(_arg0); end

  # Returns the value of attribute retry_interval.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def retry_interval; end

  # Sets the attribute retry_interval
  #
  # @param value the value to set the attribute retry_interval to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def retry_interval=(_arg0); end

  # Returns the value of attribute retry_interval_randomness.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def retry_interval_randomness; end

  # Sets the attribute retry_interval_randomness
  #
  # @param value the value to set the attribute retry_interval_randomness to.
  #
  # source://ruby_llm//lib/ruby_llm/configuration.rb#6
  def retry_interval_randomness=(_arg0); end
end

# Error classes for non-HTTP errors
#
# source://ruby_llm//lib/ruby_llm/error.rb#16
class RubyLLM::ConfigurationError < ::StandardError; end

# Connection class for managing API connections to various providers.
#
# source://ruby_llm//lib/ruby_llm/connection.rb#5
class RubyLLM::Connection
  # @return [Connection] a new instance of Connection
  #
  # source://ruby_llm//lib/ruby_llm/connection.rb#22
  def initialize(provider, config); end

  # Returns the value of attribute config.
  #
  # source://ruby_llm//lib/ruby_llm/connection.rb#6
  def config; end

  # Returns the value of attribute connection.
  #
  # source://ruby_llm//lib/ruby_llm/connection.rb#6
  def connection; end

  # source://ruby_llm//lib/ruby_llm/connection.rb#44
  def get(url, &_arg1); end

  # source://ruby_llm//lib/ruby_llm/connection.rb#36
  def post(url, payload, &_arg2); end

  # Returns the value of attribute provider.
  #
  # source://ruby_llm//lib/ruby_llm/connection.rb#6
  def provider; end

  private

  # @raise [ConfigurationError]
  #
  # source://ruby_llm//lib/ruby_llm/connection.rb#108
  def ensure_configured!; end

  # source://ruby_llm//lib/ruby_llm/connection.rb#122
  def instance_variables; end

  # source://ruby_llm//lib/ruby_llm/connection.rb#94
  def retry_exceptions; end

  # source://ruby_llm//lib/ruby_llm/connection.rb#88
  def setup_http_proxy(faraday); end

  # source://ruby_llm//lib/ruby_llm/connection.rb#57
  def setup_logging(faraday); end

  # source://ruby_llm//lib/ruby_llm/connection.rb#81
  def setup_middleware(faraday); end

  # source://ruby_llm//lib/ruby_llm/connection.rb#70
  def setup_retry(faraday); end

  # source://ruby_llm//lib/ruby_llm/connection.rb#53
  def setup_timeout(faraday); end

  class << self
    # source://ruby_llm//lib/ruby_llm/connection.rb#8
    def basic(&_arg0); end
  end
end

# Represents the content sent to or received from an LLM.
#
# source://ruby_llm//lib/ruby_llm/content.rb#5
class RubyLLM::Content
  # @raise [ArgumentError]
  # @return [Content] a new instance of Content
  #
  # source://ruby_llm//lib/ruby_llm/content.rb#8
  def initialize(text = T.unsafe(nil), attachments = T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/content.rb#16
  def add_attachment(source, filename: T.unsafe(nil)); end

  # Returns the value of attribute attachments.
  #
  # source://ruby_llm//lib/ruby_llm/content.rb#6
  def attachments; end

  # source://ruby_llm//lib/ruby_llm/content.rb#21
  def format; end

  # Returns the value of attribute text.
  #
  # source://ruby_llm//lib/ruby_llm/content.rb#6
  def text; end

  # For Rails serialization
  #
  # source://ruby_llm//lib/ruby_llm/content.rb#30
  def to_h; end

  private

  # source://ruby_llm//lib/ruby_llm/content.rb#42
  def process_attachments(attachments); end

  # source://ruby_llm//lib/ruby_llm/content.rb#36
  def process_attachments_array_or_string(attachments); end
end

# Holds per-call configs
#
# source://ruby_llm//lib/ruby_llm/context.rb#5
class RubyLLM::Context
  # @return [Context] a new instance of Context
  #
  # source://ruby_llm//lib/ruby_llm/context.rb#8
  def initialize(config); end

  # source://ruby_llm//lib/ruby_llm/context.rb#13
  def chat(*args, **kwargs, &_arg2); end

  # Returns the value of attribute config.
  #
  # source://ruby_llm//lib/ruby_llm/context.rb#6
  def config; end

  # source://ruby_llm//lib/ruby_llm/context.rb#25
  def connection_for(provider_instance); end

  # source://ruby_llm//lib/ruby_llm/context.rb#17
  def embed(*args, **kwargs, &_arg2); end

  # source://ruby_llm//lib/ruby_llm/context.rb#21
  def paint(*args, **kwargs, &_arg2); end
end

# Core embedding interface.
#
# source://ruby_llm//lib/ruby_llm/embedding.rb#5
class RubyLLM::Embedding
  # @return [Embedding] a new instance of Embedding
  #
  # source://ruby_llm//lib/ruby_llm/embedding.rb#8
  def initialize(vectors:, model:, input_tokens: T.unsafe(nil)); end

  # Returns the value of attribute input_tokens.
  #
  # source://ruby_llm//lib/ruby_llm/embedding.rb#6
  def input_tokens; end

  # Returns the value of attribute model.
  #
  # source://ruby_llm//lib/ruby_llm/embedding.rb#6
  def model; end

  # Returns the value of attribute vectors.
  #
  # source://ruby_llm//lib/ruby_llm/embedding.rb#6
  def vectors; end

  class << self
    # source://ruby_llm//lib/ruby_llm/embedding.rb#14
    def embed(text, model: T.unsafe(nil), provider: T.unsafe(nil), assume_model_exists: T.unsafe(nil), context: T.unsafe(nil), dimensions: T.unsafe(nil)); end
  end
end

# Custom error class that wraps API errors from different providers
# into a consistent format with helpful error messages.
#
# source://ruby_llm//lib/ruby_llm/error.rb#6
class RubyLLM::Error < ::StandardError
  # @return [Error] a new instance of Error
  #
  # source://ruby_llm//lib/ruby_llm/error.rb#9
  def initialize(response = T.unsafe(nil), message = T.unsafe(nil)); end

  # Returns the value of attribute response.
  #
  # source://ruby_llm//lib/ruby_llm/error.rb#7
  def response; end
end

# Faraday middleware that maps provider-specific API errors to RubyLLM errors.
#
# source://ruby_llm//lib/ruby_llm/error.rb#32
class RubyLLM::ErrorMiddleware < ::Faraday::Middleware
  # @return [ErrorMiddleware] a new instance of ErrorMiddleware
  #
  # source://ruby_llm//lib/ruby_llm/error.rb#33
  def initialize(app, options = T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/error.rb#38
  def call(env); end

  class << self
    # source://ruby_llm//lib/ruby_llm/error.rb#45
    def parse_error(provider:, response:); end
  end
end

# source://ruby_llm//lib/ruby_llm/error.rb#23
class RubyLLM::ForbiddenError < ::RubyLLM::Error; end

# Represents a generated image from an AI model.
#
# source://ruby_llm//lib/ruby_llm/image.rb#5
class RubyLLM::Image
  # @return [Image] a new instance of Image
  #
  # source://ruby_llm//lib/ruby_llm/image.rb#8
  def initialize(url: T.unsafe(nil), data: T.unsafe(nil), mime_type: T.unsafe(nil), revised_prompt: T.unsafe(nil), model_id: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/image.rb#16
  def base64?; end

  # Returns the value of attribute data.
  #
  # source://ruby_llm//lib/ruby_llm/image.rb#6
  def data; end

  # Returns the value of attribute mime_type.
  #
  # source://ruby_llm//lib/ruby_llm/image.rb#6
  def mime_type; end

  # Returns the value of attribute model_id.
  #
  # source://ruby_llm//lib/ruby_llm/image.rb#6
  def model_id; end

  # Returns the value of attribute revised_prompt.
  #
  # source://ruby_llm//lib/ruby_llm/image.rb#6
  def revised_prompt; end

  # source://ruby_llm//lib/ruby_llm/image.rb#29
  def save(path); end

  # source://ruby_llm//lib/ruby_llm/image.rb#20
  def to_blob; end

  # Returns the value of attribute url.
  #
  # source://ruby_llm//lib/ruby_llm/image.rb#6
  def url; end

  class << self
    # source://ruby_llm//lib/ruby_llm/image.rb#34
    def paint(prompt, model: T.unsafe(nil), provider: T.unsafe(nil), assume_model_exists: T.unsafe(nil), size: T.unsafe(nil), context: T.unsafe(nil)); end
  end
end

# source://ruby_llm//lib/ruby_llm/error.rb#17
class RubyLLM::InvalidRoleError < ::StandardError; end

# A single message in a chat conversation.
#
# source://ruby_llm//lib/ruby_llm/message.rb#5
class RubyLLM::Message
  # @return [Message] a new instance of Message
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#11
  def initialize(options = T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/message.rb#24
  def content; end

  # Sets the attribute content
  #
  # @param value the value to set the attribute content to.
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#9
  def content=(_arg0); end

  # Returns the value of attribute input_tokens.
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#8
  def input_tokens; end

  # source://ruby_llm//lib/ruby_llm/message.rb#56
  def instance_variables; end

  # Returns the value of attribute model_id.
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#8
  def model_id; end

  # Returns the value of attribute output_tokens.
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#8
  def output_tokens; end

  # Returns the value of attribute raw.
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#8
  def raw; end

  # Returns the value of attribute role.
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#8
  def role; end

  # source://ruby_llm//lib/ruby_llm/message.rb#44
  def to_h; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#32
  def tool_call?; end

  # Returns the value of attribute tool_call_id.
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#8
  def tool_call_id; end

  # Returns the value of attribute tool_calls.
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#8
  def tool_calls; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#36
  def tool_result?; end

  # source://ruby_llm//lib/ruby_llm/message.rb#40
  def tool_results; end

  private

  # @raise [InvalidRoleError]
  #
  # source://ruby_llm//lib/ruby_llm/message.rb#70
  def ensure_valid_role; end

  # source://ruby_llm//lib/ruby_llm/message.rb#62
  def normalize_content(content); end
end

# source://ruby_llm//lib/ruby_llm/message.rb#6
RubyLLM::Message::ROLES = T.let(T.unsafe(nil), Array)

# MimeTypes module provides methods to handle MIME types using Marcel gem
#
# source://ruby_llm//lib/ruby_llm/mime_type.rb#7
module RubyLLM::MimeType
  private

  # source://ruby_llm//lib/ruby_llm/mime_type.rb#18
  def audio?(type); end

  # source://ruby_llm//lib/ruby_llm/mime_type.rb#10
  def for(*_arg0, **_arg1, &_arg2); end

  # source://ruby_llm//lib/ruby_llm/mime_type.rb#14
  def image?(type); end

  # source://ruby_llm//lib/ruby_llm/mime_type.rb#22
  def pdf?(type); end

  # source://ruby_llm//lib/ruby_llm/mime_type.rb#26
  def text?(type); end

  class << self
    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/mime_type.rb#18
    def audio?(type); end

    # source://ruby_llm//lib/ruby_llm/mime_type.rb#10
    def for(*_arg0, **_arg1, &_arg2); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/mime_type.rb#14
    def image?(type); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/mime_type.rb#22
    def pdf?(type); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/mime_type.rb#26
    def text?(type); end
  end
end

# MIME types that don't have a text/ prefix but should be treated as text
#
# source://ruby_llm//lib/ruby_llm/mime_type.rb#36
RubyLLM::MimeType::NON_TEXT_PREFIX_TEXT_MIME_TYPES = T.let(T.unsafe(nil), Array)

# MIME types that have a text/ prefix but need to be handled differently
#
# source://ruby_llm//lib/ruby_llm/mime_type.rb#33
RubyLLM::MimeType::TEXT_SUFFIXES = T.let(T.unsafe(nil), Array)

# Model-related classes for working with LLM models
#
# source://ruby_llm//lib/ruby_llm/model.rb#5
module RubyLLM::Model; end

# Information about an AI model's capabilities, pricing, and metadata.
#
# source://ruby_llm//lib/ruby_llm/model/info.rb#6
class RubyLLM::Model::Info
  # @return [Info] a new instance of Info
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#10
  def initialize(data); end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#30
  def batch?; end

  # Returns the value of attribute capabilities.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def capabilities; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#30
  def citations?; end

  # Returns the value of attribute context_window.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def context_window; end

  # Returns the value of attribute created_at.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def created_at; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#35
  def display_name; end

  # Returns the value of attribute family.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def family; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#30
  def function_calling?; end

  # Returns the value of attribute id.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def id; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#51
  def input_price_per_million; end

  # Returns the value of attribute knowledge_cutoff.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def knowledge_cutoff; end

  # Returns the value of attribute max_output_tokens.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def max_output_tokens; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#39
  def max_tokens; end

  # Returns the value of attribute metadata.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def metadata; end

  # Returns the value of attribute modalities.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def modalities; end

  # Returns the value of attribute name.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def name; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#55
  def output_price_per_million; end

  # Returns the value of attribute pricing.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def pricing; end

  # Returns the value of attribute provider.
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#7
  def provider; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#30
  def reasoning?; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#30
  def streaming?; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#30
  def structured_output?; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#25
  def supports?(capability); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#47
  def supports_functions?; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/model/info.rb#43
  def supports_vision?; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#73
  def to_h; end

  # source://ruby_llm//lib/ruby_llm/model/info.rb#59
  def type; end
end

# Holds and manages input and output modalities for a language model
#
# source://ruby_llm//lib/ruby_llm/model/modalities.rb#6
class RubyLLM::Model::Modalities
  # @return [Modalities] a new instance of Modalities
  #
  # source://ruby_llm//lib/ruby_llm/model/modalities.rb#9
  def initialize(data); end

  # Returns the value of attribute input.
  #
  # source://ruby_llm//lib/ruby_llm/model/modalities.rb#7
  def input; end

  # Returns the value of attribute output.
  #
  # source://ruby_llm//lib/ruby_llm/model/modalities.rb#7
  def output; end

  # source://ruby_llm//lib/ruby_llm/model/modalities.rb#14
  def to_h; end
end

# A collection that manages and provides access to different categories of pricing information
#
# source://ruby_llm//lib/ruby_llm/model/pricing.rb#6
class RubyLLM::Model::Pricing
  # @return [Pricing] a new instance of Pricing
  #
  # source://ruby_llm//lib/ruby_llm/model/pricing.rb#7
  def initialize(data); end

  # source://ruby_llm//lib/ruby_llm/model/pricing.rb#15
  def method_missing(method, *args); end

  # source://ruby_llm//lib/ruby_llm/model/pricing.rb#27
  def to_h; end

  private

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/model/pricing.rb#33
  def empty_pricing?(data); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/model/pricing.rb#23
  def respond_to_missing?(method, include_private = T.unsafe(nil)); end
end

# Represents pricing tiers for different usage categories (standard and batch)
#
# source://ruby_llm//lib/ruby_llm/model/pricing_category.rb#6
class RubyLLM::Model::PricingCategory
  # @return [PricingCategory] a new instance of PricingCategory
  #
  # source://ruby_llm//lib/ruby_llm/model/pricing_category.rb#9
  def initialize(data = T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/model/pricing_category.rb#26
  def [](key); end

  # Returns the value of attribute batch.
  #
  # source://ruby_llm//lib/ruby_llm/model/pricing_category.rb#7
  def batch; end

  # source://ruby_llm//lib/ruby_llm/model/pricing_category.rb#22
  def cached_input; end

  # source://ruby_llm//lib/ruby_llm/model/pricing_category.rb#14
  def input; end

  # source://ruby_llm//lib/ruby_llm/model/pricing_category.rb#18
  def output; end

  # Returns the value of attribute standard.
  #
  # source://ruby_llm//lib/ruby_llm/model/pricing_category.rb#7
  def standard; end

  # source://ruby_llm//lib/ruby_llm/model/pricing_category.rb#30
  def to_h; end

  private

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/model/pricing_category.rb#39
  def empty_tier?(tier_data); end
end

# A dynamic class for storing non-zero pricing values with flexible attribute access
#
# source://ruby_llm//lib/ruby_llm/model/pricing_tier.rb#6
class RubyLLM::Model::PricingTier
  # @return [PricingTier] a new instance of PricingTier
  #
  # source://ruby_llm//lib/ruby_llm/model/pricing_tier.rb#7
  def initialize(data = T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/model/pricing_tier.rb#15
  def method_missing(method, *args); end

  # source://ruby_llm//lib/ruby_llm/model/pricing_tier.rb#28
  def to_h; end

  private

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/model/pricing_tier.rb#24
  def respond_to_missing?(method, include_private = T.unsafe(nil)); end
end

# source://ruby_llm//lib/ruby_llm/error.rb#18
class RubyLLM::ModelNotFoundError < ::StandardError; end

# Registry of available AI models and their capabilities.
#
# source://ruby_llm//lib/ruby_llm/models.rb#5
class RubyLLM::Models
  include ::Enumerable

  # @return [Models] a new instance of Models
  #
  # source://ruby_llm//lib/ruby_llm/models.rb#132
  def initialize(models = T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/models.rb#147
  def all; end

  # source://ruby_llm//lib/ruby_llm/models.rb#171
  def audio_models; end

  # source://ruby_llm//lib/ruby_llm/models.rb#179
  def by_family(family); end

  # source://ruby_llm//lib/ruby_llm/models.rb#183
  def by_provider(provider); end

  # source://ruby_llm//lib/ruby_llm/models.rb#163
  def chat_models; end

  # source://ruby_llm//lib/ruby_llm/models.rb#151
  def each(&_arg0); end

  # source://ruby_llm//lib/ruby_llm/models.rb#167
  def embedding_models; end

  # source://ruby_llm//lib/ruby_llm/models.rb#155
  def find(model_id, provider = T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/models.rb#175
  def image_models; end

  # source://ruby_llm//lib/ruby_llm/models.rb#136
  def load_models; end

  # source://ruby_llm//lib/ruby_llm/models.rb#187
  def refresh!; end

  # source://ruby_llm//lib/ruby_llm/models.rb#143
  def save_models; end

  private

  # source://ruby_llm//lib/ruby_llm/models.rb#193
  def find_with_provider(model_id, provider); end

  # source://ruby_llm//lib/ruby_llm/models.rb#200
  def find_without_provider(model_id); end

  class << self
    # source://ruby_llm//lib/ruby_llm/models.rb#125
    def add_provider_metadata(parsera_model, provider_model); end

    # source://ruby_llm//lib/ruby_llm/models.rb#86
    def fetch_from_parsera; end

    # source://ruby_llm//lib/ruby_llm/models.rb#32
    def fetch_from_providers; end

    # source://ruby_llm//lib/ruby_llm/models.rb#119
    def index_by_key(models); end

    # source://ruby_llm//lib/ruby_llm/models.rb#9
    def instance; end

    # source://ruby_llm//lib/ruby_llm/models.rb#98
    def merge_models(provider_models, parsera_models); end

    # source://ruby_llm//lib/ruby_llm/models.rb#74
    def method_missing(method, *_arg1, **_arg2, &_arg3); end

    # source://ruby_llm//lib/ruby_llm/models.rb#17
    def models_file; end

    # source://ruby_llm//lib/ruby_llm/models.rb#13
    def provider_for(model); end

    # source://ruby_llm//lib/ruby_llm/models.rb#25
    def refresh!; end

    # source://ruby_llm//lib/ruby_llm/models.rb#42
    def resolve(model_id, provider: T.unsafe(nil), assume_exists: T.unsafe(nil), config: T.unsafe(nil)); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/models.rb#82
    def respond_to_missing?(method, include_private = T.unsafe(nil)); end

    # source://ruby_llm//lib/ruby_llm/models.rb#21
    def schema_file; end
  end
end

# source://ruby_llm//lib/ruby_llm/error.rb#24
class RubyLLM::OverloadedError < ::RubyLLM::Error; end

# Parameter definition for Tool methods.
#
# source://ruby_llm//lib/ruby_llm/tool.rb#5
class RubyLLM::Parameter
  # @return [Parameter] a new instance of Parameter
  #
  # source://ruby_llm//lib/ruby_llm/tool.rb#8
  def initialize(name, type: T.unsafe(nil), desc: T.unsafe(nil), required: T.unsafe(nil)); end

  # Returns the value of attribute description.
  #
  # source://ruby_llm//lib/ruby_llm/tool.rb#6
  def description; end

  # Returns the value of attribute name.
  #
  # source://ruby_llm//lib/ruby_llm/tool.rb#6
  def name; end

  # Returns the value of attribute required.
  #
  # source://ruby_llm//lib/ruby_llm/tool.rb#6
  def required; end

  # Returns the value of attribute type.
  #
  # source://ruby_llm//lib/ruby_llm/tool.rb#6
  def type; end
end

# source://ruby_llm//lib/ruby_llm/error.rb#25
class RubyLLM::PaymentRequiredError < ::RubyLLM::Error; end

# Base class for LLM providers.
#
# source://ruby_llm//lib/ruby_llm/provider.rb#5
class RubyLLM::Provider
  include ::RubyLLM::Streaming

  # @return [Provider] a new instance of Provider
  #
  # source://ruby_llm//lib/ruby_llm/provider.rb#10
  def initialize(config); end

  # @raise [NotImplementedError]
  #
  # source://ruby_llm//lib/ruby_llm/provider.rb#16
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/provider.rb#32
  def capabilities; end

  # source://ruby_llm//lib/ruby_llm/provider.rb#40
  def complete(messages, tools:, temperature:, model:, params: T.unsafe(nil), headers: T.unsafe(nil), schema: T.unsafe(nil), &_arg7); end

  # Returns the value of attribute config.
  #
  # source://ruby_llm//lib/ruby_llm/provider.rb#8
  def config; end

  # source://ruby_llm//lib/ruby_llm/provider.rb#36
  def configuration_requirements; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/provider.rb#79
  def configured?; end

  # Returns the value of attribute connection.
  #
  # source://ruby_llm//lib/ruby_llm/provider.rb#8
  def connection; end

  # source://ruby_llm//lib/ruby_llm/provider.rb#67
  def embed(text, model:, dimensions:); end

  # source://ruby_llm//lib/ruby_llm/provider.rb#107
  def format_messages(messages); end

  # source://ruby_llm//lib/ruby_llm/provider.rb#116
  def format_tool_calls(_tool_calls); end

  # source://ruby_llm//lib/ruby_llm/provider.rb#20
  def headers; end

  # source://ruby_llm//lib/ruby_llm/provider.rb#62
  def list_models; end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/provider.rb#83
  def local?; end

  # source://ruby_llm//lib/ruby_llm/provider.rb#28
  def name; end

  # source://ruby_llm//lib/ruby_llm/provider.rb#73
  def paint(prompt, model:, size:); end

  # source://ruby_llm//lib/ruby_llm/provider.rb#91
  def parse_error(response); end

  # source://ruby_llm//lib/ruby_llm/provider.rb#120
  def parse_tool_calls(_tool_calls); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/provider.rb#87
  def remote?; end

  # source://ruby_llm//lib/ruby_llm/provider.rb#24
  def slug; end

  private

  # @raise [ConfigurationError]
  #
  # source://ruby_llm//lib/ruby_llm/provider.rb#197
  def ensure_configured!; end

  # source://ruby_llm//lib/ruby_llm/provider.rb#204
  def maybe_normalize_temperature(temperature, _model_id); end

  # source://ruby_llm//lib/ruby_llm/provider.rb#208
  def sync_response(connection, payload, additional_headers = T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/provider.rb#189
  def try_parse_json(maybe_json); end

  class << self
    # @raise [NotImplementedError]
    #
    # source://ruby_llm//lib/ruby_llm/provider.rb#133
    def capabilities; end

    # source://ruby_llm//lib/ruby_llm/provider.rb#137
    def configuration_requirements; end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/provider.rb#149
    def configured?(config); end

    # source://ruby_llm//lib/ruby_llm/provider.rb#174
    def configured_providers(config); end

    # source://ruby_llm//lib/ruby_llm/provider.rb#180
    def configured_remote_providers(config); end

    # source://ruby_llm//lib/ruby_llm/provider.rb#157
    def for(model); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/provider.rb#141
    def local?; end

    # source://ruby_llm//lib/ruby_llm/provider.rb#166
    def local_providers; end

    # source://ruby_llm//lib/ruby_llm/provider.rb#125
    def name; end

    # source://ruby_llm//lib/ruby_llm/provider.rb#162
    def providers; end

    # source://ruby_llm//lib/ruby_llm/provider.rb#153
    def register(name, provider_class); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/provider.rb#145
    def remote?; end

    # source://ruby_llm//lib/ruby_llm/provider.rb#170
    def remote_providers; end

    # source://ruby_llm//lib/ruby_llm/provider.rb#129
    def slug; end
  end
end

# source://ruby_llm//lib/ruby_llm.rb#0
module RubyLLM::Providers; end

# Anthropic Claude API integration.
#
# source://ruby_llm//lib/ruby_llm/providers/anthropic.rb#6
class RubyLLM::Providers::Anthropic < ::RubyLLM::Provider
  include ::RubyLLM::Providers::Anthropic::Chat
  include ::RubyLLM::Providers::Anthropic::Embeddings
  include ::RubyLLM::Providers::Anthropic::Media
  include ::RubyLLM::Providers::Anthropic::Models
  include ::RubyLLM::Providers::Anthropic::Streaming
  include ::RubyLLM::Providers::Anthropic::Tools

  # source://ruby_llm//lib/ruby_llm/providers/anthropic.rb#14
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic.rb#18
  def headers; end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/anthropic.rb#26
    def capabilities; end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic.rb#30
    def configuration_requirements; end
  end
end

# Determines capabilities and pricing for Anthropic models
#
# source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#7
module RubyLLM::Providers::Anthropic::Capabilities
  private

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#92
  def capabilities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#70
  def default_input_price; end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#74
  def default_output_price; end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#10
  def determine_context_window(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#14
  def determine_max_tokens(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#21
  def get_input_price(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#25
  def get_output_price(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#78
  def modalities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#45
  def model_family(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#57
  def model_type(_); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#105
  def pricing_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#41
  def supports_extended_thinking?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#33
  def supports_functions?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#37
  def supports_json_mode?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#29
  def supports_vision?(model_id); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#92
    def capabilities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#70
    def default_input_price; end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#74
    def default_output_price; end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#10
    def determine_context_window(_model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#14
    def determine_max_tokens(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#21
    def get_input_price(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#25
    def get_output_price(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#78
    def modalities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#45
    def model_family(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#57
    def model_type(_); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#105
    def pricing_for(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#41
    def supports_extended_thinking?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#33
    def supports_functions?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#37
    def supports_json_mode?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#29
    def supports_vision?(model_id); end
  end
end

# source://ruby_llm//lib/ruby_llm/providers/anthropic/capabilities.rb#61
RubyLLM::Providers::Anthropic::Capabilities::PRICES = T.let(T.unsafe(nil), Hash)

# Chat methods of the OpenAI API integration
#
# source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#7
module RubyLLM::Providers::Anthropic::Chat
  private

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#47
  def add_optional_fields(payload, system_content:, tools:, temperature:); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#38
  def build_base_payload(chat_messages, model, stream); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#68
  def build_message(data, content, tool_use_blocks, response); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#27
  def build_system_content(system_messages); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#10
  def completion_url; end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#97
  def convert_role(role); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#63
  def extract_text_content(blocks); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#90
  def format_basic_message(msg); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#80
  def format_message(msg); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#53
  def parse_completion_response(response); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#14
  def render_payload(messages, tools:, temperature:, model:, stream: T.unsafe(nil), schema: T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#23
  def separate_messages(messages); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#47
    def add_optional_fields(payload, system_content:, tools:, temperature:); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#38
    def build_base_payload(chat_messages, model, stream); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#68
    def build_message(data, content, tool_use_blocks, response); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#27
    def build_system_content(system_messages); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#10
    def completion_url; end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#97
    def convert_role(role); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#63
    def extract_text_content(blocks); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#90
    def format_basic_message(msg); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#80
    def format_message(msg); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#53
    def parse_completion_response(response); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#14
    def render_payload(messages, tools:, temperature:, model:, stream: T.unsafe(nil), schema: T.unsafe(nil)); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/chat.rb#23
    def separate_messages(messages); end
  end
end

# Embeddings methods of the Anthropic API integration
#
# source://ruby_llm//lib/ruby_llm/providers/anthropic/embeddings.rb#7
module RubyLLM::Providers::Anthropic::Embeddings
  private

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/embeddings.rb#10
  def embed; end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/embeddings.rb#10
  def embedding_url; end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/embeddings.rb#10
  def parse_embedding_response; end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/embeddings.rb#10
  def render_embedding_payload; end
end

# Handles formatting of media content (images, PDFs, audio) for Anthropic
#
# source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#7
module RubyLLM::Providers::Anthropic::Media
  private

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#10
  def format_content(content); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#40
  def format_image(image); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#61
  def format_pdf(pdf); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#33
  def format_text(text); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#82
  def format_text_file(text_file); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#10
    def format_content(content); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#40
    def format_image(image); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#61
    def format_pdf(pdf); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#33
    def format_text(text); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/media.rb#82
    def format_text_file(text_file); end
  end
end

# Models methods of the Anthropic API integration
#
# source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#7
module RubyLLM::Providers::Anthropic::Models
  private

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#38
  def extract_input_tokens(data); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#34
  def extract_model_id(data); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#42
  def extract_output_tokens(data); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#10
  def models_url; end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#14
  def parse_list_models_response(response, slug, capabilities); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#38
    def extract_input_tokens(data); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#34
    def extract_model_id(data); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#42
    def extract_output_tokens(data); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#10
    def models_url; end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/models.rb#14
    def parse_list_models_response(response, slug, capabilities); end
  end
end

# Streaming methods of the Anthropic API integration
#
# source://ruby_llm//lib/ruby_llm/providers/anthropic/streaming.rb#7
module RubyLLM::Providers::Anthropic::Streaming
  private

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/streaming.rb#14
  def build_chunk(data); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/anthropic/streaming.rb#25
  def json_delta?(data); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/streaming.rb#29
  def parse_streaming_error(data); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/streaming.rb#10
  def stream_url; end
end

# Tools methods of the Anthropic API integration
#
# source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#7
module RubyLLM::Providers::Anthropic::Tools
  private

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#92
  def clean_parameters(parameters); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#65
  def extract_tool_calls(data); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#10
  def find_tool_uses(blocks); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#14
  def format_tool_call(msg); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#29
  def format_tool_result(msg); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#45
  def format_tool_result_block(msg); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#36
  def format_tool_use_block(tool_call); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#53
  def function_for(tool); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#73
  def parse_tool_calls(content_blocks); end

  # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#101
  def required_parameters(parameters); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#92
    def clean_parameters(parameters); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#65
    def extract_tool_calls(data); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#10
    def find_tool_uses(blocks); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#14
    def format_tool_call(msg); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#29
    def format_tool_result(msg); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#45
    def format_tool_result_block(msg); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#36
    def format_tool_use_block(tool_call); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#53
    def function_for(tool); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#73
    def parse_tool_calls(content_blocks); end

    # source://ruby_llm//lib/ruby_llm/providers/anthropic/tools.rb#101
    def required_parameters(parameters); end
  end
end

# AWS Bedrock API integration.
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock.rb#9
class RubyLLM::Providers::Bedrock < ::RubyLLM::Provider
  include ::RubyLLM::Providers::Bedrock::Chat
  include ::RubyLLM::Providers::Bedrock::Streaming::Base
  include ::RubyLLM::Providers::Bedrock::Streaming::ContentExtraction
  include ::RubyLLM::Providers::Bedrock::Streaming::MessageProcessing
  include ::RubyLLM::Providers::Bedrock::Streaming::PayloadProcessing
  include ::RubyLLM::Providers::Bedrock::Streaming::PreludeHandling
  include ::RubyLLM::Providers::Bedrock::Streaming
  include ::RubyLLM::Providers::Bedrock::Models
  include ::RubyLLM::Providers::Bedrock::Signing
  include ::RubyLLM::Providers::Bedrock::Media
  include ::RubyLLM::Providers::Anthropic::Tools

  # source://ruby_llm//lib/ruby_llm/providers/bedrock.rb#17
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock.rb#62
  def build_headers(signature_headers, streaming: T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock.rb#53
  def build_request(url, method: T.unsafe(nil), payload: T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock.rb#43
  def create_signer; end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock.rb#21
  def parse_error(response); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock.rb#37
  def sign_request(url, method: T.unsafe(nil), payload: T.unsafe(nil)); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock.rb#72
    def capabilities; end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock.rb#76
    def configuration_requirements; end
  end
end

# Determines capabilities and pricing for AWS Bedrock models
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#7
module RubyLLM::Providers::Bedrock::Capabilities
  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#126
  def capabilities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#10
  def context_window_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#95
  def default_input_price; end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#99
  def default_output_price; end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#57
  def format_display_name(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#103
  def humanize(id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#21
  def input_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#17
  def max_tokens_for(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#112
  def modalities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#81
  def model_family(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#61
  def model_type(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#25
  def output_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#143
  def pricing_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#49
  def supports_audio?(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#29
  def supports_chat?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#45
  def supports_functions?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#37
  def supports_images?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#53
  def supports_json_mode?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#33
  def supports_streaming?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#65
  def supports_structured_output?(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#41
  def supports_vision?(model_id); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#126
    def capabilities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#10
    def context_window_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#95
    def default_input_price; end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#99
    def default_output_price; end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#57
    def format_display_name(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#103
    def humanize(id); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#21
    def input_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#17
    def max_tokens_for(_model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#112
    def modalities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#81
    def model_family(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#61
    def model_type(_model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#25
    def output_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#143
    def pricing_for(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#49
    def supports_audio?(_model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#29
    def supports_chat?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#45
    def supports_functions?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#37
    def supports_images?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#53
    def supports_json_mode?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#33
    def supports_streaming?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#65
    def supports_structured_output?(_model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#41
    def supports_vision?(model_id); end
  end
end

# Model family patterns for capability lookup
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#70
RubyLLM::Providers::Bedrock::Capabilities::MODEL_FAMILIES = T.let(T.unsafe(nil), Hash)

# Pricing information for Bedrock models (per million tokens)
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/capabilities.rb#86
RubyLLM::Providers::Bedrock::Capabilities::PRICES = T.let(T.unsafe(nil), Hash)

# Chat methods for the AWS Bedrock API implementation
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/chat.rb#7
module RubyLLM::Providers::Bedrock::Chat
  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/chat.rb#53
  def build_base_payload(chat_messages, model); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/chat.rb#38
  def completion_url; end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/chat.rb#29
  def format_basic_message(msg); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/chat.rb#19
  def format_message(msg); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/chat.rb#42
  def render_payload(messages, tools:, temperature:, model:, stream: T.unsafe(nil), schema: T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/chat.rb#10
  def sync_response(connection, payload, additional_headers = T.unsafe(nil)); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/chat.rb#29
    def format_basic_message(msg); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/chat.rb#19
    def format_message(msg); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/chat.rb#10
    def sync_response(connection, payload, additional_headers = T.unsafe(nil)); end
  end
end

# Media handling methods for the Bedrock API integration
# NOTE: Bedrock does not support url attachments
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/media.rb#8
module RubyLLM::Providers::Bedrock::Media
  extend ::RubyLLM::Providers::Anthropic::Media

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/media.rb#13
  def format_content(content); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/media.rb#36
  def format_image(image); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/media.rb#47
  def format_pdf(pdf); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/media.rb#13
    def format_content(content); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/media.rb#36
    def format_image(image); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/media.rb#47
    def format_pdf(pdf); end
  end
end

# Models methods for the AWS Bedrock API implementation
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/models.rb#7
module RubyLLM::Providers::Bedrock::Models
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/models.rb#8
  def list_models; end

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/models.rb#53
  def create_model_info(model_data, slug, _capabilities); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/models.rb#71
  def model_id_with_region(model_id, model_data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/models.rb#21
  def models_url; end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/models.rb#25
  def parse_list_models_response(response, slug, capabilities); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/models.rb#53
    def create_model_info(model_data, slug, _capabilities); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/models.rb#71
    def model_id_with_region(model_id, model_data); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/models.rb#21
    def models_url; end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/models.rb#25
    def parse_list_models_response(response, slug, capabilities); end
  end
end

# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#18
module RubyLLM::Providers::Bedrock::Signing; end

# Handles canonical requests for AWS signature
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#257
class RubyLLM::Providers::Bedrock::Signing::CanonicalRequest
  # Builds a canonical request for AWS signature
  #
  # @param params [Hash] Parameters for the canonical request
  # @return [CanonicalRequest] a new instance of CanonicalRequest
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#260
  def initialize(params = T.unsafe(nil)); end

  # Returns the list of signed headers for authorization
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#280
  def signed_headers; end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#268
  def to_s; end

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#314
  def canonical_header_value(value); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#302
  def canonical_headers; end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#292
  def path; end
end

# Configuration for canonical request creation
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#247
class RubyLLM::Providers::Bedrock::Signing::CanonicalRequestConfig
  # @return [CanonicalRequestConfig] a new instance of CanonicalRequestConfig
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#250
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute unsigned_headers.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#248
  def unsigned_headers; end

  # Returns the value of attribute uri_escape_path.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#248
  def uri_escape_path; end
end

# Credential management and fetching
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#490
class RubyLLM::Providers::Bedrock::Signing::CredentialManager
  # @return [CredentialManager] a new instance of CredentialManager
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#491
  def initialize(credentials_provider); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#507
  def credentials_set?(credentials); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#495
  def fetch_credentials; end
end

# Manages AWS credentials for authentication
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#134
class RubyLLM::Providers::Bedrock::Signing::Credentials
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Credentials] a new instance of Credentials
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#138
  def initialize(options = T.unsafe(nil)); end

  # @return [String]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#150
  def access_key_id; end

  # @return [String]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#153
  def secret_access_key; end

  # @return [String, nil]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#156
  def session_token; end

  # @return [Boolean] Returns `true` if the access key id and secret
  #   access key are both set.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#160
  def set?; end
end

# Cryptographic hash and digest utilities
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#228
module RubyLLM::Providers::Bedrock::Signing::CryptoUtils
  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#241
  def hexhmac(key, value); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#237
  def hmac(key, value); end

  # @param value [String]
  # @return [String<SHA256 Hexdigest>]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#233
  def sha256_hexdigest(value); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#241
    def hexhmac(key, value); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#237
    def hmac(key, value); end

    # @param value [String]
    # @return [String<SHA256 Hexdigest>]
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#233
    def sha256_hexdigest(value); end
  end
end

# Utility class for creating AWS signature version 4 signature. This class
# provides a method for generating signatures:
#
# * {#sign_request} - Computes a signature of the given request, returning
#   the hash of headers that should be applied to the request.
#
# ## Configuration
#
# To use the signer, you need to specify the service, region, and credentials.
# The service name is normally the endpoint prefix to an AWS service. For
# example:
#
#     ec2.us-west-1.amazonaws.com => ec2
#
# The region is normally the second portion of the endpoint, following
# the service name.
#
#     ec2.us-west-1.amazonaws.com => us-west-1
#
# It is important to have the correct service and region name, or the
# signature will be invalid.
#
# ## Credentials
#
# The signer requires credentials. You can configure the signer
# with static credentials:
#
#     signer = Aws::Sigv4::Signer.new(
#       service: 's3',
#       region: 'us-east-1',
#       # static credentials
#       access_key_id: 'akid',
#       secret_access_key: 'secret'
#     )
#
# You can also provide refreshing credentials via the `:credentials_provider`.
# If you are using the AWS SDK for Ruby, you can use any of the credential
# classes:
#
#     signer = Aws::Sigv4::Signer.new(
#       service: 's3',
#       region: 'us-east-1',
#       credentials_provider: Aws::InstanceProfileCredentials.new
#     )
#
# Other AWS SDK for Ruby classes that can be provided via `:credentials_provider`:
#
# * `Aws::Credentials`
# * `Aws::SharedCredentials`
# * `Aws::InstanceProfileCredentials`
# * `Aws::AssumeRoleCredentials`
# * `Aws::ECSCredentials`
#
# A credential provider is any object that responds to `#credentials`
# returning another object that responds to `#access_key_id`, `#secret_access_key`,
# and `#session_token`.
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#75
module RubyLLM::Providers::Bedrock::Signing::Errors; end

# Error raised when AWS credentials are missing or incomplete
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#77
class RubyLLM::Providers::Bedrock::Signing::Errors::MissingCredentialsError < ::ArgumentError
  # @return [MissingCredentialsError] a new instance of MissingCredentialsError
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#78
  def initialize(msg = T.unsafe(nil)); end
end

# Error raised when AWS region is not specified
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#89
class RubyLLM::Providers::Bedrock::Signing::Errors::MissingRegionError < ::ArgumentError
  # @return [MissingRegionError] a new instance of MissingRegionError
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#90
  def initialize(*_args); end
end

# Handles generating headers for AWS request signing
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#424
class RubyLLM::Providers::Bedrock::Signing::HeaderBuilder
  # @return [HeaderBuilder] a new instance of HeaderBuilder
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#425
  def initialize(options = T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#462
  def build_authorization_header(signature); end

  # Build authorization headers for a signature
  #
  # @param sigv4_headers [Hash] Headers for the signature
  # @param signature [Hash] The computed signature
  # @param components [Hash] Request components
  # @return [Hash] Headers with authorization
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#453
  def build_headers(sigv4_headers, signature, components); end

  # Build headers for a signed request
  #
  # @param components [Hash] Request components
  # @param creds [Credentials] AWS credentials
  # @return [Hash] Generated headers
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#436
  def build_sigv4_headers(components, creds); end

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#478
  def add_content_sha256_header(headers, content_sha256); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#482
  def add_omitted_session_token(headers, creds); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#472
  def add_session_token_header(headers, creds); end
end

# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#189
class RubyLLM::Providers::Bedrock::Signing::ParamComponent < ::Struct
  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute offset
  #
  # @return [Object] the current value of offset
  def offset; end

  # Sets the attribute offset
  #
  # @param value [Object] the value to set the attribute offset to.
  # @return [Object] the newly set value
  def offset=(_); end

  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# Extracts and validates request components
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#359
class RubyLLM::Providers::Bedrock::Signing::RequestExtractor
  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#378
    def build_component_hash(http_method, url, headers, datetime, content_sha256); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#418
    def downcase_headers(headers); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#389
    def extract_base_components(request); end

    # Extract and process request components
    #
    # @param request [Hash] The request to process
    # @param options [Hash] Options for extraction
    # @return [Hash] Processed request components
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#364
    def extract_components(request, options = T.unsafe(nil)); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#396
    def extract_content_sha256(headers, body); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#400
    def extract_http_method(request); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#409
    def extract_url(request); end
  end
end

# Represents a signature for AWS request signing
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#97
class RubyLLM::Providers::Bedrock::Signing::Signature
  # @api private
  # @return [Signature] a new instance of Signature
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#99
  def initialize(options); end

  # @return [String] For debugging purposes.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#118
  def canonical_request; end

  # @return [String] For debugging purposes.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#118
  def canonical_request=(_arg0); end

  # @return [String] For debugging purposes.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#124
  def content_sha256; end

  # @return [String] For debugging purposes.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#124
  def content_sha256=(_arg0); end

  # @return [Hash] Internal data for debugging purposes.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#130
  def extra; end

  # @return [Hash] Internal data for debugging purposes.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#130
  def extra=(_arg0); end

  # @return [Hash<String,String>] A hash of headers that should
  #   be applied to the HTTP request. Header keys are lower
  #   cased strings and may include the following:
  #
  #   * 'host'
  #   * 'x-amz-date'
  #   * 'x-amz-security-token'
  #   * 'x-amz-content-sha256'
  #   * 'authorization'
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#115
  def headers; end

  # @return [Hash<String,String>] A hash of headers that should
  #   be applied to the HTTP request. Header keys are lower
  #   cased strings and may include the following:
  #
  #   * 'host'
  #   * 'x-amz-date'
  #   * 'x-amz-security-token'
  #   * 'x-amz-content-sha256'
  #   * 'authorization'
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#115
  def headers=(_arg0); end

  # @return [String] For debugging purposes.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#127
  def signature; end

  # @return [String] For debugging purposes.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#127
  def signature=(_arg0); end

  # @return [String] For debugging purposes.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#121
  def string_to_sign; end

  # @return [String] For debugging purposes.
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#121
  def string_to_sign=(_arg0); end
end

# Handles signature computation
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#320
class RubyLLM::Providers::Bedrock::Signing::SignatureComputation
  # @return [SignatureComputation] a new instance of SignatureComputation
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#321
  def initialize(service, region, signing_algorithm); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#345
  def credential(credentials, date); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#336
  def credential_scope(date); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#349
  def signature(secret_access_key, date, string_to_sign); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#327
  def string_to_sign(datetime, canonical_request, algorithm); end
end

# Core functionality for computing signatures
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#547
class RubyLLM::Providers::Bedrock::Signing::SignatureGenerator
  # @return [SignatureGenerator] a new instance of SignatureGenerator
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#548
  def initialize(options = T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#563
  def compute_signature(components, creds, sigv4_headers); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#559
  def sts_algorithm; end

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#591
  def build_signature_result(components, creds, canonical_request, sig, algorithm); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#577
  def compute_signature_from_request(canonical_request, components, creds, algorithm); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#603
  def create_canonical_request(components, headers); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#615
  def create_canonical_request_config; end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#622
  def generate_signature(creds, date, string_to_sign); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#583
  def generate_string_to_sign(components, creq, algorithm); end
end

# Result builder for signature computation
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#516
class RubyLLM::Providers::Bedrock::Signing::SignatureResultBuilder
  # @return [SignatureResultBuilder] a new instance of SignatureResultBuilder
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#517
  def initialize(signature_computation); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#521
  def build_result(request_data); end

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#538
  def credential_from_request(request_data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#527
  def result_hash(request_data); end
end

# Handles AWS request signing using SigV4 or SigV4a
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#728
class RubyLLM::Providers::Bedrock::Signing::Signer
  # Initialize a new signer with the provided options
  #
  # @param options [Hash] Configuration options for the signer
  # @return [Signer] a new instance of Signer
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#731
  def initialize(options = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#750
  def apply_checksum_header; end

  # @return [#credentials]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#744
  def credentials_provider; end

  # @return [String]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#741
  def region; end

  # @return [String]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#738
  def service; end

  # Sign an AWS request with SigV4 or SigV4a
  #
  # @param request [Hash] The request to sign
  # @return [Signature] The signature with headers to apply
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#755
  def sign_request(request); end

  # @return [Set<String>]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#747
  def unsigned_headers; end

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#802
  def build_signature_response(components, sigv4_headers, signature); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#790
  def build_sigv4_headers(request_components, creds); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#794
  def compute_signature(request_components, creds, sigv4_headers); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#783
  def extract_request_components(request); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#765
  def setup_configuration(components); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#777
  def setup_service_components(components); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#823
    def normalize_path(uri); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#819
    def uri_escape(string); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#815
    def uri_escape_path(path); end
  end
end

# Handles initialization of Signer dependencies
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#661
class RubyLLM::Providers::Bedrock::Signing::SignerInitializer
  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#662
    def create_components(options = T.unsafe(nil)); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#717
    def create_header_builder(components); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#695
    def create_service_components(components); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#707
    def create_signature_generator(components); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#686
    def extract_config_options(options); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#678
    def extract_core_components(options); end
  end
end

# Utility for extracting options and config
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#628
class RubyLLM::Providers::Bedrock::Signing::SignerOptionExtractor
  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#644
    def extract_credentials_provider(options); end

    # @raise [Errors::MissingRegionError]
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#638
    def extract_region(options); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#629
    def extract_service(options); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#654
    def initialize_unsigned_headers(options); end
  end
end

# Users that wish to configure static credentials can use the
# `:access_key_id` and `:secret_access_key` constructor options.
#
# @api private
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#171
class RubyLLM::Providers::Bedrock::Signing::StaticCredentialsProvider
  # @api private
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [StaticCredentialsProvider] a new instance of StaticCredentialsProvider
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#176
  def initialize(options = T.unsafe(nil)); end

  # @api private
  # @return [Credentials]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#181
  def credentials; end

  # @api private
  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#184
  def set?; end
end

# Utility methods for URI manipulation and hashing
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#192
module RubyLLM::Providers::Bedrock::Signing::UriUtils
  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#217
  def host(uri); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#207
  def normalize_path(uri); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#199
  def uri_escape(string); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#195
  def uri_escape_path(path); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#217
    def host(uri); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#207
    def normalize_path(uri); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#199
    def uri_escape(string); end

    # source://ruby_llm//lib/ruby_llm/providers/bedrock/signing.rb#195
    def uri_escape_path(path); end
  end
end

# Streaming implementation for the AWS Bedrock API.
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/base.rb#6
module RubyLLM::Providers::Bedrock::Streaming
  include ::RubyLLM::Providers::Bedrock::Streaming::Base
  include ::RubyLLM::Providers::Bedrock::Streaming::ContentExtraction
  include ::RubyLLM::Providers::Bedrock::Streaming::MessageProcessing
  include ::RubyLLM::Providers::Bedrock::Streaming::PayloadProcessing
  include ::RubyLLM::Providers::Bedrock::Streaming::PreludeHandling
end

# Base module for AWS Bedrock streaming functionality.
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/base.rb#8
module RubyLLM::Providers::Bedrock::Streaming::Base
  include ::RubyLLM::Providers::Bedrock::Streaming::ContentExtraction
  include ::RubyLLM::Providers::Bedrock::Streaming::MessageProcessing
  include ::RubyLLM::Providers::Bedrock::Streaming::PayloadProcessing
  include ::RubyLLM::Providers::Bedrock::Streaming::PreludeHandling

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/base.rb#37
  def handle_stream(&block); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/base.rb#20
  def stream_response(connection, payload, additional_headers = T.unsafe(nil), &block); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/base.rb#16
  def stream_url; end

  class << self
    # @private
    #
    # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/base.rb#9
    def included(base); end
  end
end

# Module for handling content extraction from AWS Bedrock streaming responses.
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/content_extraction.rb#8
module RubyLLM::Providers::Bedrock::Streaming::ContentExtraction
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/content_extraction.rb#27
  def extract_input_tokens(data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/content_extraction.rb#23
  def extract_model_id(data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/content_extraction.rb#31
  def extract_output_tokens(data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/content_extraction.rb#13
  def extract_streaming_content(data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/content_extraction.rb#19
  def extract_tool_calls(data); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/content_extraction.rb#9
  def json_delta?(data); end

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/content_extraction.rb#45
  def extract_block_start_content(data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/content_extraction.rb#37
  def extract_content_by_type(data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/content_extraction.rb#49
  def extract_delta_content(data); end
end

# Module for processing streaming messages from AWS Bedrock.
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/message_processing.rb#8
module RubyLLM::Providers::Bedrock::Streaming::MessageProcessing
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/message_processing.rb#9
  def process_chunk(chunk, &_arg1); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/message_processing.rb#17
  def process_message(chunk, offset, &_arg2); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/message_processing.rb#26
  def process_valid_message(chunk, offset, message_info, &_arg3); end

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/message_processing.rb#36
  def extract_message_info(chunk, offset); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/message_processing.rb#49
  def extract_payload(chunk, headers_end, payload_end); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/message_processing.rb#53
  def valid_payload?(payload); end
end

# Module for processing payloads from AWS Bedrock streaming responses.
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#10
module RubyLLM::Providers::Bedrock::Streaming::PayloadProcessing
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#11
  def process_payload(payload, &_arg1); end

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#49
  def build_chunk(data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#45
  def create_and_yield_chunk(data, &block); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#40
  def decode_and_parse_data(json_data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#55
  def extract_chunk_attributes(data); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#22
  def extract_json_payload(payload); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#71
  def log_general_error(error); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#66
  def log_json_parse_error(error, json_payload); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#28
  def parse_and_process_json(json_payload, &_arg1); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/payload_processing.rb#33
  def process_json_data(json_data, &_arg1); end
end

# Module for handling message preludes in AWS Bedrock streaming responses.
#
# source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#8
module RubyLLM::Providers::Bedrock::Streaming::PreludeHandling
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#23
  def calculate_positions(offset, total_length, headers_length); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#9
  def can_read_prelude?(chunk, offset); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#37
  def find_next_message(chunk, offset); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#42
  def find_next_prelude(chunk, start_offset); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#13
  def read_prelude(chunk, offset); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#19
  def valid_lengths?(total_length, headers_length); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#29
  def valid_positions?(headers_end, payload_end, chunk_size); end

  private

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#60
  def extract_potential_lengths(chunk, pos); end

  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#51
  def scan_range(chunk, start_offset); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#67
  def valid_length_constraints?(total_length, headers_length); end

  # @return [Boolean]
  #
  # source://ruby_llm//lib/ruby_llm/providers/bedrock/streaming/prelude_handling.rb#55
  def valid_prelude_at_position?(chunk, pos); end
end

# DeepSeek API integration.
#
# source://ruby_llm//lib/ruby_llm/providers/deepseek.rb#6
class RubyLLM::Providers::DeepSeek < ::RubyLLM::Providers::OpenAI
  include ::RubyLLM::Providers::DeepSeek::Chat

  # source://ruby_llm//lib/ruby_llm/providers/deepseek.rb#9
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek.rb#13
  def headers; end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/deepseek.rb#20
    def capabilities; end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek.rb#24
    def configuration_requirements; end
  end
end

# Determines capabilities and pricing for DeepSeek models
#
# source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#7
module RubyLLM::Providers::DeepSeek::Capabilities
  private

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#32
  def cache_hit_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#102
  def capabilities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#10
  def context_window_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#91
  def default_cache_hit_price; end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#83
  def default_input_price; end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#87
  def default_output_price; end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#48
  def format_display_name(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#24
  def input_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#17
  def max_tokens_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#95
  def modalities_for(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#63
  def model_family(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#59
  def model_type(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#28
  def output_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#110
  def pricing_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#40
  def supports_functions?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#44
  def supports_json_mode?(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#36
  def supports_vision?(_model_id); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#32
    def cache_hit_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#102
    def capabilities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#10
    def context_window_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#91
    def default_cache_hit_price; end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#83
    def default_input_price; end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#87
    def default_output_price; end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#48
    def format_display_name(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#24
    def input_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#17
    def max_tokens_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#95
    def modalities_for(_model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#63
    def model_family(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#59
    def model_type(_model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#28
    def output_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#110
    def pricing_for(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#40
    def supports_functions?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#44
    def supports_json_mode?(_model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#36
    def supports_vision?(_model_id); end
  end
end

# source://ruby_llm//lib/ruby_llm/providers/deepseek/capabilities.rb#70
RubyLLM::Providers::DeepSeek::Capabilities::PRICES = T.let(T.unsafe(nil), Hash)

# Chat methods of the DeepSeek API integration
#
# source://ruby_llm//lib/ruby_llm/providers/deepseek/chat.rb#7
module RubyLLM::Providers::DeepSeek::Chat
  private

  # source://ruby_llm//lib/ruby_llm/providers/deepseek/chat.rb#10
  def format_role(role); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/deepseek/chat.rb#10
    def format_role(role); end
  end
end

# GPUStack API integration based on Ollama.
#
# source://ruby_llm//lib/ruby_llm/providers/gpustack.rb#6
class RubyLLM::Providers::GPUStack < ::RubyLLM::Providers::OpenAI
  include ::RubyLLM::Providers::GPUStack::Chat
  include ::RubyLLM::Providers::GPUStack::Models

  # source://ruby_llm//lib/ruby_llm/providers/gpustack.rb#10
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/providers/gpustack.rb#14
  def headers; end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/gpustack.rb#27
    def configuration_requirements; end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/gpustack.rb#23
    def local?; end
  end
end

# Chat methods of the GPUStack API integration
#
# source://ruby_llm//lib/ruby_llm/providers/gpustack/chat.rb#7
module RubyLLM::Providers::GPUStack::Chat
  private

  # source://ruby_llm//lib/ruby_llm/providers/gpustack/chat.rb#10
  def format_role(role); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/gpustack/chat.rb#10
    def format_role(role); end
  end
end

# Models methods of the GPUStack API integration
#
# source://ruby_llm//lib/ruby_llm/providers/gpustack/models.rb#7
module RubyLLM::Providers::GPUStack::Models
  private

  # source://ruby_llm//lib/ruby_llm/providers/gpustack/models.rb#45
  def determine_model_type(model); end

  # source://ruby_llm//lib/ruby_llm/providers/gpustack/models.rb#10
  def models_url; end

  # source://ruby_llm//lib/ruby_llm/providers/gpustack/models.rb#14
  def parse_list_models_response(response, slug, _capabilities); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/gpustack/models.rb#10
    def models_url; end

    # source://ruby_llm//lib/ruby_llm/providers/gpustack/models.rb#14
    def parse_list_models_response(response, slug, _capabilities); end
  end
end

# Native Gemini API implementation
#
# source://ruby_llm//lib/ruby_llm/providers/gemini.rb#6
class RubyLLM::Providers::Gemini < ::RubyLLM::Provider
  include ::RubyLLM::Providers::Gemini::Chat
  include ::RubyLLM::Providers::Gemini::Embeddings
  include ::RubyLLM::Providers::Gemini::Images
  include ::RubyLLM::Providers::Gemini::Models
  include ::RubyLLM::Providers::Gemini::Streaming
  include ::RubyLLM::Providers::Gemini::Tools
  include ::RubyLLM::Providers::Gemini::Media

  # source://ruby_llm//lib/ruby_llm/providers/gemini.rb#15
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/providers/gemini.rb#19
  def headers; end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/gemini.rb#26
    def capabilities; end

    # source://ruby_llm//lib/ruby_llm/providers/gemini.rb#30
    def configuration_requirements; end
  end
end

# Determines capabilities and pricing for Google Gemini models
#
# source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#7
module RubyLLM::Providers::Gemini::Capabilities
  private

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#227
  def capabilities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#142
  def context_length(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#10
  def context_window_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#201
  def default_input_price; end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#205
  def default_output_price; end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#69
  def format_display_name(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#35
  def input_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#138
  def long_context_model?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#23
  def max_tokens_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#209
  def modalities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#105
  def model_family(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#97
  def model_type(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#42
  def output_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#122
  def pricing_family(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#238
  def pricing_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#93
  def supports_audio?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#81
  def supports_caching?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#55
  def supports_functions?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#61
  def supports_json_mode?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#89
  def supports_tuning?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#49
  def supports_vision?(model_id); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#227
    def capabilities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#142
    def context_length(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#10
    def context_window_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#201
    def default_input_price; end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#205
    def default_output_price; end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#69
    def format_display_name(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#35
    def input_price_for(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#138
    def long_context_model?(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#23
    def max_tokens_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#209
    def modalities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#105
    def model_family(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#97
    def model_type(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#42
    def output_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#122
    def pricing_family(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#238
    def pricing_for(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#93
    def supports_audio?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#81
    def supports_caching?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#55
    def supports_functions?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#61
    def supports_json_mode?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#89
    def supports_tuning?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#49
    def supports_vision?(model_id); end
  end
end

# source://ruby_llm//lib/ruby_llm/providers/gemini/capabilities.rb#146
RubyLLM::Providers::Gemini::Capabilities::PRICES = T.let(T.unsafe(nil), Hash)

# Chat methods for the Gemini API implementation
#
# source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#7
module RubyLLM::Providers::Gemini::Chat
  private

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#150
  def apply_type_specific_attributes(result, schema); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#122
  def build_base_schema(schema); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#139
  def build_object_schema(schema); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#116
  def calculate_output_tokens(data); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#10
  def completion_url; end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#89
  def convert_schema_to_gemini(schema); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#163
  def copy_attributes(target, source, *attributes); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#98
  def extract_content(data); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#34
  def format_messages(messages); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#51
  def format_parts(msg); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#43
  def format_role(role); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#111
  def function_call?(candidate); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#74
  def parse_completion_response(response); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#14
  def render_payload(messages, tools:, temperature:, model:, stream: T.unsafe(nil), schema: T.unsafe(nil)); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#10
    def completion_url; end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/chat.rb#14
    def render_payload(messages, tools:, temperature:, model:, stream: T.unsafe(nil), schema: T.unsafe(nil)); end
  end
end

# Embeddings methods for the Gemini API integration
#
# source://ruby_llm//lib/ruby_llm/providers/gemini/embeddings.rb#7
module RubyLLM::Providers::Gemini::Embeddings
  private

  # source://ruby_llm//lib/ruby_llm/providers/gemini/embeddings.rb#10
  def embedding_url(model:); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/embeddings.rb#18
  def parse_embedding_response(response, model:, text:); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/embeddings.rb#14
  def render_embedding_payload(text, model:, dimensions:); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/embeddings.rb#27
  def single_embedding_payload(text, model:, dimensions:); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/gemini/embeddings.rb#10
    def embedding_url(model:); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/embeddings.rb#18
    def parse_embedding_response(response, model:, text:); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/embeddings.rb#14
    def render_embedding_payload(text, model:, dimensions:); end
  end
end

# Image generation methods for the Gemini API implementation
#
# source://ruby_llm//lib/ruby_llm/providers/gemini/images.rb#7
module RubyLLM::Providers::Gemini::Images
  # source://ruby_llm//lib/ruby_llm/providers/gemini/images.rb#8
  def images_url; end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/images.rb#27
  def parse_image_response(response, model:); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/images.rb#12
  def render_image_payload(prompt, model:, size:); end
end

# Media handling methods for the Gemini API integration
#
# source://ruby_llm//lib/ruby_llm/providers/gemini/media.rb#7
module RubyLLM::Providers::Gemini::Media
  private

  # source://ruby_llm//lib/ruby_llm/providers/gemini/media.rb#31
  def format_attachment(attachment); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/media.rb#10
  def format_content(content); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/media.rb#46
  def format_text(text); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/media.rb#40
  def format_text_file(text_file); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/gemini/media.rb#31
    def format_attachment(attachment); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/media.rb#10
    def format_content(content); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/media.rb#46
    def format_text(text); end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/media.rb#40
    def format_text_file(text_file); end
  end
end

# Models methods for the Gemini API integration
#
# source://ruby_llm//lib/ruby_llm/providers/gemini/models.rb#7
module RubyLLM::Providers::Gemini::Models
  private

  # source://ruby_llm//lib/ruby_llm/providers/gemini/models.rb#10
  def models_url; end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/models.rb#14
  def parse_list_models_response(response, slug, capabilities); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/gemini/models.rb#10
    def models_url; end

    # source://ruby_llm//lib/ruby_llm/providers/gemini/models.rb#14
    def parse_list_models_response(response, slug, capabilities); end
  end
end

# Streaming methods for the Gemini API implementation
#
# source://ruby_llm//lib/ruby_llm/providers/gemini/streaming.rb#7
module RubyLLM::Providers::Gemini::Streaming
  # source://ruby_llm//lib/ruby_llm/providers/gemini/streaming.rb#12
  def build_chunk(data); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/streaming.rb#8
  def stream_url; end

  private

  # source://ruby_llm//lib/ruby_llm/providers/gemini/streaming.rb#29
  def extract_content(data); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/streaming.rb#40
  def extract_input_tokens(data); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/streaming.rb#25
  def extract_model_id(data); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/streaming.rb#44
  def extract_output_tokens(data); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/streaming.rb#51
  def parse_streaming_error(data); end
end

# Tools methods for the Gemini API implementation
#
# source://ruby_llm//lib/ruby_llm/providers/gemini/tools.rb#7
module RubyLLM::Providers::Gemini::Tools
  # source://ruby_llm//lib/ruby_llm/providers/gemini/tools.rb#16
  def extract_tool_calls(data); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/tools.rb#8
  def format_tools(tools); end

  private

  # source://ruby_llm//lib/ruby_llm/providers/gemini/tools.rb#52
  def format_parameters(parameters); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/tools.rb#44
  def function_declaration_for(tool); end

  # source://ruby_llm//lib/ruby_llm/providers/gemini/tools.rb#65
  def param_type_for_gemini(type); end
end

# Mistral API integration.
#
# source://ruby_llm//lib/ruby_llm/providers/mistral.rb#6
class RubyLLM::Providers::Mistral < ::RubyLLM::Providers::OpenAI
  include ::RubyLLM::Providers::Mistral::Chat
  include ::RubyLLM::Providers::Mistral::Models
  include ::RubyLLM::Providers::Mistral::Embeddings

  # source://ruby_llm//lib/ruby_llm/providers/mistral.rb#11
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/providers/mistral.rb#15
  def headers; end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/mistral.rb#22
    def capabilities; end

    # source://ruby_llm//lib/ruby_llm/providers/mistral.rb#26
    def configuration_requirements; end
  end
end

# Determines capabilities for Mistral models
#
# source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#7
module RubyLLM::Providers::Mistral::Capabilities
  private

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#84
  def capabilities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#56
  def context_window_for(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#26
  def format_display_name(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#60
  def max_tokens_for(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#64
  def modalities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#42
  def model_family(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#106
  def pricing_for(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#113
  def release_date_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#22
  def supports_json_mode?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#10
  def supports_streaming?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#14
  def supports_tools?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#18
  def supports_vision?(model_id); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#84
    def capabilities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#56
    def context_window_for(_model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#26
    def format_display_name(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#60
    def max_tokens_for(_model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#64
    def modalities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#42
    def model_family(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#106
    def pricing_for(_model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#113
    def release_date_for(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#22
    def supports_json_mode?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#10
    def supports_streaming?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#14
    def supports_tools?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/mistral/capabilities.rb#18
    def supports_vision?(model_id); end
  end
end

# Chat methods for Mistral API
#
# source://ruby_llm//lib/ruby_llm/providers/mistral/chat.rb#7
module RubyLLM::Providers::Mistral::Chat
  private

  # source://ruby_llm//lib/ruby_llm/providers/mistral/chat.rb#10
  def format_role(role); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/chat.rb#15
  def render_payload(messages, tools:, temperature:, model:, stream: T.unsafe(nil), schema: T.unsafe(nil)); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/mistral/chat.rb#10
    def format_role(role); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/chat.rb#15
    def render_payload(messages, tools:, temperature:, model:, stream: T.unsafe(nil), schema: T.unsafe(nil)); end
  end
end

# Embeddings methods for Mistral API
#
# source://ruby_llm//lib/ruby_llm/providers/mistral/embeddings.rb#7
module RubyLLM::Providers::Mistral::Embeddings
  private

  # source://ruby_llm//lib/ruby_llm/providers/mistral/embeddings.rb#10
  def embedding_url(*_arg0, **_arg1, &_arg2); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/embeddings.rb#21
  def parse_embedding_response(response, model:, text:); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/embeddings.rb#14
  def render_embedding_payload(text, model:, dimensions:); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/mistral/embeddings.rb#10
    def embedding_url(*_arg0, **_arg1, &_arg2); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/embeddings.rb#21
    def parse_embedding_response(response, model:, text:); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/embeddings.rb#14
    def render_embedding_payload(text, model:, dimensions:); end
  end
end

# Model information for Mistral
#
# source://ruby_llm//lib/ruby_llm/providers/mistral/models.rb#7
module RubyLLM::Providers::Mistral::Models
  private

  # source://ruby_llm//lib/ruby_llm/providers/mistral/models.rb#14
  def headers(config); end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/models.rb#10
  def models_url; end

  # source://ruby_llm//lib/ruby_llm/providers/mistral/models.rb#20
  def parse_list_models_response(response, slug, capabilities); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/mistral/models.rb#14
    def headers(config); end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/models.rb#10
    def models_url; end

    # source://ruby_llm//lib/ruby_llm/providers/mistral/models.rb#20
    def parse_list_models_response(response, slug, capabilities); end
  end
end

# Ollama API integration.
#
# source://ruby_llm//lib/ruby_llm/providers/ollama.rb#6
class RubyLLM::Providers::Ollama < ::RubyLLM::Providers::OpenAI
  include ::RubyLLM::Providers::Ollama::Chat
  include ::RubyLLM::Providers::Ollama::Media

  # source://ruby_llm//lib/ruby_llm/providers/ollama.rb#10
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/providers/ollama.rb#14
  def headers; end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/ollama.rb#19
    def configuration_requirements; end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/ollama.rb#23
    def local?; end
  end
end

# Chat methods of the Ollama API integration
#
# source://ruby_llm//lib/ruby_llm/providers/ollama/chat.rb#7
module RubyLLM::Providers::Ollama::Chat
  private

  # source://ruby_llm//lib/ruby_llm/providers/ollama/chat.rb#10
  def format_messages(messages); end

  # source://ruby_llm//lib/ruby_llm/providers/ollama/chat.rb#21
  def format_role(role); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/ollama/chat.rb#10
    def format_messages(messages); end

    # source://ruby_llm//lib/ruby_llm/providers/ollama/chat.rb#21
    def format_role(role); end
  end
end

# Handles formatting of media content (images, audio) for OpenAI APIs
#
# source://ruby_llm//lib/ruby_llm/providers/ollama/media.rb#7
module RubyLLM::Providers::Ollama::Media
  extend ::RubyLLM::Providers::OpenAI::Media

  private

  # source://ruby_llm//lib/ruby_llm/providers/ollama/media.rb#12
  def format_content(content); end

  # source://ruby_llm//lib/ruby_llm/providers/ollama/media.rb#37
  def format_image(image); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/ollama/media.rb#12
    def format_content(content); end

    # source://ruby_llm//lib/ruby_llm/providers/ollama/media.rb#37
    def format_image(image); end
  end
end

# OpenAI API integration.
#
# source://ruby_llm//lib/ruby_llm/providers/openai.rb#6
class RubyLLM::Providers::OpenAI < ::RubyLLM::Provider
  include ::RubyLLM::Providers::OpenAI::Chat
  include ::RubyLLM::Providers::OpenAI::Embeddings
  include ::RubyLLM::Providers::OpenAI::Models
  include ::RubyLLM::Providers::OpenAI::Streaming
  include ::RubyLLM::Providers::OpenAI::Tools
  include ::RubyLLM::Providers::OpenAI::Images
  include ::RubyLLM::Providers::OpenAI::Media

  # source://ruby_llm//lib/ruby_llm/providers/openai.rb#15
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/providers/openai.rb#19
  def headers; end

  # source://ruby_llm//lib/ruby_llm/providers/openai.rb#27
  def maybe_normalize_temperature(temperature, model_id); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openai.rb#32
    def capabilities; end

    # source://ruby_llm//lib/ruby_llm/providers/openai.rb#36
    def configuration_requirements; end
  end
end

# Determines capabilities and pricing for OpenAI models
#
# source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#7
module RubyLLM::Providers::OpenAI::Capabilities
  private

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#196
  def apply_special_formatting(name); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#154
  def cached_input_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#248
  def capabilities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#44
  def context_window_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#176
  def default_input_price; end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#180
  def default_output_price; end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#184
  def format_display_name(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#189
  def humanize(id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#148
  def input_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#60
  def max_tokens_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#230
  def modalities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#141
  def model_family(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#166
  def model_type(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#160
  def output_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#266
  def pricing_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#209
  def special_prefix_format(prefix); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#85
  def supports_functions?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#103
  def supports_json_mode?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#95
  def supports_structured_output?(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#77
  def supports_vision?(model_id); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#196
    def apply_special_formatting(name); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#154
    def cached_input_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#248
    def capabilities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#44
    def context_window_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#176
    def default_input_price; end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#180
    def default_output_price; end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#184
    def format_display_name(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#189
    def humanize(id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#148
    def input_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#60
    def max_tokens_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#230
    def modalities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#141
    def model_family(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#166
    def model_type(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#218
    def normalize_temperature(temperature, model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#160
    def output_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#266
    def pricing_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#209
    def special_prefix_format(prefix); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#85
    def supports_functions?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#103
    def supports_json_mode?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#95
    def supports_structured_output?(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#77
    def supports_vision?(model_id); end
  end
end

# source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#10
RubyLLM::Providers::OpenAI::Capabilities::MODEL_PATTERNS = T.let(T.unsafe(nil), Hash)

# source://ruby_llm//lib/ruby_llm/providers/openai/capabilities.rb#107
RubyLLM::Providers::OpenAI::Capabilities::PRICES = T.let(T.unsafe(nil), Hash)

# Chat methods of the OpenAI API integration
#
# source://ruby_llm//lib/ruby_llm/providers/openai/chat.rb#7
module RubyLLM::Providers::OpenAI::Chat
  # source://ruby_llm//lib/ruby_llm/providers/openai/chat.rb#8
  def completion_url; end

  private

  # source://ruby_llm//lib/ruby_llm/providers/openai/chat.rb#61
  def format_messages(messages); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/chat.rb#72
  def format_role(role); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/chat.rb#41
  def parse_completion_response(response); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/chat.rb#14
  def render_payload(messages, tools:, temperature:, model:, stream: T.unsafe(nil), schema: T.unsafe(nil)); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openai/chat.rb#61
    def format_messages(messages); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/chat.rb#72
    def format_role(role); end

    # @raise [Error]
    #
    # source://ruby_llm//lib/ruby_llm/providers/openai/chat.rb#41
    def parse_completion_response(response); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/chat.rb#14
    def render_payload(messages, tools:, temperature:, model:, stream: T.unsafe(nil), schema: T.unsafe(nil)); end
  end
end

# Embeddings methods of the OpenAI API integration
#
# source://ruby_llm//lib/ruby_llm/providers/openai/embeddings.rb#7
module RubyLLM::Providers::OpenAI::Embeddings
  private

  # source://ruby_llm//lib/ruby_llm/providers/openai/embeddings.rb#10
  def embedding_url(*_arg0, **_arg1, &_arg2); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/embeddings.rb#22
  def parse_embedding_response(response, model:, text:); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/embeddings.rb#14
  def render_embedding_payload(text, model:, dimensions:); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openai/embeddings.rb#10
    def embedding_url(*_arg0, **_arg1, &_arg2); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/embeddings.rb#22
    def parse_embedding_response(response, model:, text:); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/embeddings.rb#14
    def render_embedding_payload(text, model:, dimensions:); end
  end
end

# Image generation methods for the OpenAI API integration
#
# source://ruby_llm//lib/ruby_llm/providers/openai/images.rb#7
module RubyLLM::Providers::OpenAI::Images
  private

  # source://ruby_llm//lib/ruby_llm/providers/openai/images.rb#10
  def images_url; end

  # source://ruby_llm//lib/ruby_llm/providers/openai/images.rb#23
  def parse_image_response(response, model:); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/images.rb#14
  def render_image_payload(prompt, model:, size:); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openai/images.rb#10
    def images_url; end

    # source://ruby_llm//lib/ruby_llm/providers/openai/images.rb#23
    def parse_image_response(response, model:); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/images.rb#14
    def render_image_payload(prompt, model:, size:); end
  end
end

# Handles formatting of media content (images, audio) for OpenAI APIs
#
# source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#7
module RubyLLM::Providers::OpenAI::Media
  private

  # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#61
  def format_audio(audio); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#10
  def format_content(content); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#35
  def format_image(image); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#44
  def format_pdf(pdf); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#71
  def format_text(text); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#54
  def format_text_file(text_file); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#61
    def format_audio(audio); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#10
    def format_content(content); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#35
    def format_image(image); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#44
    def format_pdf(pdf); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#71
    def format_text(text); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/media.rb#54
    def format_text_file(text_file); end
  end
end

# Models methods of the OpenAI API integration
#
# source://ruby_llm//lib/ruby_llm/providers/openai/models.rb#7
module RubyLLM::Providers::OpenAI::Models
  private

  # source://ruby_llm//lib/ruby_llm/providers/openai/models.rb#10
  def models_url; end

  # source://ruby_llm//lib/ruby_llm/providers/openai/models.rb#14
  def parse_list_models_response(response, slug, capabilities); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openai/models.rb#10
    def models_url; end

    # source://ruby_llm//lib/ruby_llm/providers/openai/models.rb#14
    def parse_list_models_response(response, slug, capabilities); end
  end
end

# Streaming methods of the OpenAI API integration
#
# source://ruby_llm//lib/ruby_llm/providers/openai/streaming.rb#7
module RubyLLM::Providers::OpenAI::Streaming
  private

  # source://ruby_llm//lib/ruby_llm/providers/openai/streaming.rb#14
  def build_chunk(data); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/streaming.rb#25
  def parse_streaming_error(data); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/streaming.rb#10
  def stream_url; end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openai/streaming.rb#14
    def build_chunk(data); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/streaming.rb#25
    def parse_streaming_error(data); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/streaming.rb#10
    def stream_url; end
  end
end

# Tools methods of the OpenAI API integration
#
# source://ruby_llm//lib/ruby_llm/providers/openai/tools.rb#7
module RubyLLM::Providers::OpenAI::Tools
  private

  # source://ruby_llm//lib/ruby_llm/providers/openai/tools.rb#32
  def format_tool_calls(tool_calls); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/tools.rb#25
  def param_schema(param); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/tools.rb#47
  def parse_tool_calls(tool_calls, parse_arguments: T.unsafe(nil)); end

  # source://ruby_llm//lib/ruby_llm/providers/openai/tools.rb#10
  def tool_for(tool); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openai/tools.rb#32
    def format_tool_calls(tool_calls); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/tools.rb#25
    def param_schema(param); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/tools.rb#47
    def parse_tool_calls(tool_calls, parse_arguments: T.unsafe(nil)); end

    # source://ruby_llm//lib/ruby_llm/providers/openai/tools.rb#10
    def tool_for(tool); end
  end
end

# OpenRouter API integration.
#
# source://ruby_llm//lib/ruby_llm/providers/openrouter.rb#6
class RubyLLM::Providers::OpenRouter < ::RubyLLM::Providers::OpenAI
  include ::RubyLLM::Providers::OpenRouter::Models

  # source://ruby_llm//lib/ruby_llm/providers/openrouter.rb#9
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/providers/openrouter.rb#13
  def headers; end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openrouter.rb#20
    def configuration_requirements; end
  end
end

# Models methods of the OpenRouter API integration
#
# source://ruby_llm//lib/ruby_llm/providers/openrouter/models.rb#7
module RubyLLM::Providers::OpenRouter::Models
  private

  # source://ruby_llm//lib/ruby_llm/providers/openrouter/models.rb#10
  def models_url; end

  # source://ruby_llm//lib/ruby_llm/providers/openrouter/models.rb#14
  def parse_list_models_response(response, slug, _capabilities); end

  # source://ruby_llm//lib/ruby_llm/providers/openrouter/models.rb#59
  def supported_parameters_to_capabilities(params); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/openrouter/models.rb#10
    def models_url; end

    # source://ruby_llm//lib/ruby_llm/providers/openrouter/models.rb#14
    def parse_list_models_response(response, slug, _capabilities); end

    # source://ruby_llm//lib/ruby_llm/providers/openrouter/models.rb#59
    def supported_parameters_to_capabilities(params); end
  end
end

# Perplexity API integration.
#
# source://ruby_llm//lib/ruby_llm/providers/perplexity.rb#6
class RubyLLM::Providers::Perplexity < ::RubyLLM::Providers::OpenAI
  include ::RubyLLM::Providers::Perplexity::Chat
  include ::RubyLLM::Providers::Perplexity::Models

  # source://ruby_llm//lib/ruby_llm/providers/perplexity.rb#10
  def api_base; end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity.rb#14
  def headers; end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity.rb#31
  def parse_error(response); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/perplexity.rb#22
    def capabilities; end

    # source://ruby_llm//lib/ruby_llm/providers/perplexity.rb#26
    def configuration_requirements; end
  end
end

# Determines capabilities and pricing for Perplexity models
#
# source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#7
module RubyLLM::Providers::Perplexity::Capabilities
  private

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#83
  def capabilities_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#10
  def context_window_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#47
  def format_display_name(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#24
  def input_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#17
  def max_tokens_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#76
  def modalities_for(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#65
  def model_family(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#61
  def model_type(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#28
  def output_price_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#89
  def pricing_for(model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#39
  def supports_functions?(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#43
  def supports_json_mode?(_model_id); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#32
  def supports_vision?(model_id); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#83
    def capabilities_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#10
    def context_window_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#47
    def format_display_name(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#24
    def input_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#17
    def max_tokens_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#76
    def modalities_for(_model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#65
    def model_family(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#61
    def model_type(_model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#28
    def output_price_for(model_id); end

    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#89
    def pricing_for(model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#39
    def supports_functions?(_model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#43
    def supports_json_mode?(_model_id); end

    # @return [Boolean]
    #
    # source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#32
    def supports_vision?(model_id); end
  end
end

# source://ruby_llm//lib/ruby_llm/providers/perplexity/capabilities.rb#109
RubyLLM::Providers::Perplexity::Capabilities::PRICES = T.let(T.unsafe(nil), Hash)

# Chat formatting for Perplexity provider
#
# source://ruby_llm//lib/ruby_llm/providers/perplexity/chat.rb#7
module RubyLLM::Providers::Perplexity::Chat
  private

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/chat.rb#10
  def format_role(role); end

  class << self
    # source://ruby_llm//lib/ruby_llm/providers/perplexity/chat.rb#10
    def format_role(role); end
  end
end

# Models methods of the Perplexity API integration
#
# source://ruby_llm//lib/ruby_llm/providers/perplexity/models.rb#7
module RubyLLM::Providers::Perplexity::Models
  # source://ruby_llm//lib/ruby_llm/providers/perplexity/models.rb#24
  def create_model_info(id, slug, capabilities); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/models.rb#8
  def list_models(**_arg0); end

  # source://ruby_llm//lib/ruby_llm/providers/perplexity/models.rb#14
  def parse_list_models_response(_response, slug, capabilities); end
end

# source://ruby_llm//lib/ruby_llm/error.rb#26
class RubyLLM::RateLimitError < ::RubyLLM::Error; end

# source://ruby_llm//lib/ruby_llm/error.rb#27
class RubyLLM::ServerError < ::RubyLLM::Error; end

# source://ruby_llm//lib/ruby_llm/error.rb#28
class RubyLLM::ServiceUnavailableError < ::RubyLLM::Error; end

# Assembles streaming responses from LLMs into complete messages.
#
# source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#5
class RubyLLM::StreamAccumulator
  # @return [StreamAccumulator] a new instance of StreamAccumulator
  #
  # source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#8
  def initialize; end

  # source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#16
  def add(chunk); end

  # Returns the value of attribute content.
  #
  # source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#6
  def content; end

  # Returns the value of attribute model_id.
  #
  # source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#6
  def model_id; end

  # source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#30
  def to_message(response); end

  # Returns the value of attribute tool_calls.
  #
  # source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#6
  def tool_calls; end

  private

  # source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#62
  def accumulate_tool_calls(new_tool_calls); end

  # source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#90
  def count_tokens(chunk); end

  # source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#81
  def find_tool_call(tool_call_id); end

  # source://ruby_llm//lib/ruby_llm/stream_accumulator.rb#44
  def tool_calls_from_stream; end
end

# Handles streaming responses from AI providers.
#
# source://ruby_llm//lib/ruby_llm/streaming.rb#5
module RubyLLM::Streaming
  private

  # source://ruby_llm//lib/ruby_llm/streaming.rb#50
  def create_stream_processor(parser, buffer, &_arg2); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#84
  def error_chunk?(chunk); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#39
  def faraday_1?; end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#124
  def handle_data(data); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#88
  def handle_error_chunk(chunk, env); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#130
  def handle_error_event(data, env); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#104
  def handle_failed_response(chunk, buffer, env); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#113
  def handle_sse(chunk, parser, env, &block); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#31
  def handle_stream(&block); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#68
  def legacy_stream_processor(parser, &block); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#145
  def parse_streaming_error(data); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#58
  def process_stream_chunk(chunk, parser, env, &_arg3); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#74
  def stream_processor(parser, buffer, &block); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#8
  def stream_response(connection, payload, additional_headers = T.unsafe(nil), &block); end

  # source://ruby_llm//lib/ruby_llm/streaming.rb#43
  def to_json_stream(&_arg0); end

  class << self
    # source://ruby_llm//lib/ruby_llm/streaming.rb#31
    def handle_stream(&block); end

    # source://ruby_llm//lib/ruby_llm/streaming.rb#8
    def stream_response(connection, payload, additional_headers = T.unsafe(nil), &block); end
  end
end

# Base class for creating tools that AI models can use
#
# source://ruby_llm//lib/ruby_llm/tool.rb#17
class RubyLLM::Tool
  # source://ruby_llm//lib/ruby_llm/tool.rb#66
  def call(args); end

  # source://ruby_llm//lib/ruby_llm/tool.rb#58
  def description; end

  # @raise [NotImplementedError]
  #
  # source://ruby_llm//lib/ruby_llm/tool.rb#73
  def execute(*_arg0, **_arg1, &_arg2); end

  # source://ruby_llm//lib/ruby_llm/tool.rb#47
  def name; end

  # source://ruby_llm//lib/ruby_llm/tool.rb#62
  def parameters; end

  protected

  # source://ruby_llm//lib/ruby_llm/tool.rb#79
  def halt(message); end

  class << self
    # source://ruby_llm//lib/ruby_llm/tool.rb#32
    def description(text = T.unsafe(nil)); end

    # source://ruby_llm//lib/ruby_llm/tool.rb#38
    def param(name, **options); end

    # source://ruby_llm//lib/ruby_llm/tool.rb#42
    def parameters; end
  end
end

# Stops conversation continuation after tool execution
#
# source://ruby_llm//lib/ruby_llm/tool.rb#19
class RubyLLM::Tool::Halt
  # @return [Halt] a new instance of Halt
  #
  # source://ruby_llm//lib/ruby_llm/tool.rb#22
  def initialize(content); end

  # Returns the value of attribute content.
  #
  # source://ruby_llm//lib/ruby_llm/tool.rb#20
  def content; end

  # source://ruby_llm//lib/ruby_llm/tool.rb#26
  def to_s; end
end

# Represents a function call from an AI model to a Tool.
#
# source://ruby_llm//lib/ruby_llm/tool_call.rb#5
class RubyLLM::ToolCall
  # @return [ToolCall] a new instance of ToolCall
  #
  # source://ruby_llm//lib/ruby_llm/tool_call.rb#8
  def initialize(id:, name:, arguments: T.unsafe(nil)); end

  # Returns the value of attribute arguments.
  #
  # source://ruby_llm//lib/ruby_llm/tool_call.rb#6
  def arguments; end

  # Returns the value of attribute id.
  #
  # source://ruby_llm//lib/ruby_llm/tool_call.rb#6
  def id; end

  # Returns the value of attribute name.
  #
  # source://ruby_llm//lib/ruby_llm/tool_call.rb#6
  def name; end

  # source://ruby_llm//lib/ruby_llm/tool_call.rb#14
  def to_h; end
end

# source://ruby_llm//lib/ruby_llm/error.rb#29
class RubyLLM::UnauthorizedError < ::RubyLLM::Error; end

# source://ruby_llm//lib/ruby_llm/error.rb#19
class RubyLLM::UnsupportedAttachmentError < ::StandardError; end

# Provides utility functions for data manipulation within the RubyLLM library
#
# source://ruby_llm//lib/ruby_llm/utils.rb#5
module RubyLLM::Utils
  private

  # source://ruby_llm//lib/ruby_llm/utils.rb#39
  def deep_merge(params, payload); end

  # source://ruby_llm//lib/ruby_llm/utils.rb#8
  def format_text_file_for_llm(text_file); end

  # source://ruby_llm//lib/ruby_llm/utils.rb#12
  def hash_get(hash, key); end

  # source://ruby_llm//lib/ruby_llm/utils.rb#33
  def to_date(value); end

  # source://ruby_llm//lib/ruby_llm/utils.rb#16
  def to_safe_array(item); end

  # source://ruby_llm//lib/ruby_llm/utils.rb#27
  def to_time(value); end

  class << self
    # source://ruby_llm//lib/ruby_llm/utils.rb#39
    def deep_merge(params, payload); end

    # source://ruby_llm//lib/ruby_llm/utils.rb#8
    def format_text_file_for_llm(text_file); end

    # source://ruby_llm//lib/ruby_llm/utils.rb#12
    def hash_get(hash, key); end

    # source://ruby_llm//lib/ruby_llm/utils.rb#33
    def to_date(value); end

    # source://ruby_llm//lib/ruby_llm/utils.rb#16
    def to_safe_array(item); end

    # source://ruby_llm//lib/ruby_llm/utils.rb#27
    def to_time(value); end
  end
end

# source://ruby_llm//lib/ruby_llm/version.rb#4
RubyLLM::VERSION = T.let(T.unsafe(nil), String)
