# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby_llm-mcp` gem.
# Please instead update this file by running `bin/tapioca gem ruby_llm-mcp`.


# This is an override of the RubyLLM::Chat class to add convenient methods to more
# easily work with the MCP clients.
#
# source://ruby_llm-mcp//lib/ruby_llm/chat.rb#5
module RubyLLM
  class << self
    # source://ruby_llm/1.6.4/lib/ruby_llm.rb#43
    def chat(*_arg0, **_arg1, &_arg2); end

    # source://ruby_llm/1.6.4/lib/ruby_llm.rb#67
    def config; end

    # source://ruby_llm/1.6.4/lib/ruby_llm.rb#63
    def configure; end

    # source://ruby_llm/1.6.4/lib/ruby_llm.rb#37
    def context; end

    # source://ruby_llm/1.6.4/lib/ruby_llm.rb#47
    def embed(*_arg0, **_arg1, &_arg2); end

    # source://ruby_llm/1.6.4/lib/ruby_llm.rb#71
    def logger; end

    # source://ruby_llm/1.6.4/lib/ruby_llm.rb#55
    def models; end

    # source://ruby_llm/1.6.4/lib/ruby_llm.rb#51
    def paint(*_arg0, **_arg1, &_arg2); end

    # source://ruby_llm/1.6.4/lib/ruby_llm.rb#59
    def providers; end
  end
end

# source://ruby_llm-mcp//lib/ruby_llm/chat.rb#6
class RubyLLM::Chat
  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#10
  def initialize(model: T.unsafe(nil), provider: T.unsafe(nil), assume_model_exists: T.unsafe(nil), context: T.unsafe(nil)); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#156
  def add_message(message_or_attributes); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#33
  def ask(message = T.unsafe(nil), with: T.unsafe(nil), &_arg2); end

  # source://ruby_llm-mcp//lib/ruby_llm/chat.rb#30
  def ask_prompt(prompt, *_arg1, **_arg2, &_arg3); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#124
  def complete(&_arg0); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#120
  def each(&_arg0); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#8
  def headers; end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#8
  def messages; end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#8
  def model; end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#105
  def on_end_message(&block); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#100
  def on_new_message(&block); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#110
  def on_tool_call(&block); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#115
  def on_tool_result(&block); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#8
  def params; end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#162
  def reset_messages!; end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#33
  def say(message = T.unsafe(nil), with: T.unsafe(nil), &_arg2); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#8
  def schema; end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#8
  def tools; end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#70
  def with_context(context); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#82
  def with_headers(**headers); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#40
  def with_instructions(instructions, replace: T.unsafe(nil)); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#59
  def with_model(model_id, provider: T.unsafe(nil), assume_exists: T.unsafe(nil)); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#77
  def with_params(**params); end

  # source://ruby_llm-mcp//lib/ruby_llm/chat.rb#25
  def with_prompt(prompt, arguments: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/chat.rb#14
  def with_resource(resource); end

  # source://ruby_llm-mcp//lib/ruby_llm/chat.rb#19
  def with_resource_template(resource_template, arguments: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/chat.rb#7
  def with_resources(*resources, **args); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#87
  def with_schema(schema); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#65
  def with_temperature(temperature); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#47
  def with_tool(tool); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#53
  def with_tools(*tools, replace: T.unsafe(nil)); end

  private

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#202
  def execute_tool(tool_call); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#184
  def handle_tool_calls(response, &_arg1); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#208
  def instance_variables; end

  # source://ruby_llm/1.6.4/lib/ruby_llm/chat.rb#168
  def wrap_streaming_block(&block); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#9
module RubyLLM::MCP
  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#22
  def add_client(options); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#32
  def client(*_arg0, **_arg1, &_arg2); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#12
  def clients(config = T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#49
  def close_connection; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#74
  def config; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#74
  def configuration; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#70
  def configure; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#36
  def establish_connection(&_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#81
  def logger; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#26
  def remove_client(name); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#64
  def support_complex_parameters!; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#55
  def tools(blacklist: T.unsafe(nil), whitelist: T.unsafe(nil)); end

  class << self
    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#22
    def add_client(options); end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#32
    def client(*_arg0, **_arg1, &_arg2); end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#12
    def clients(config = T.unsafe(nil)); end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#49
    def close_connection; end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#74
    def config; end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#74
    def configuration; end

    # @yield [config]
    #
    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#70
    def configure; end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#36
    def establish_connection(&_arg0); end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#81
    def logger; end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#26
    def remove_client(name); end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#64
    def support_complex_parameters!; end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp.rb#55
    def tools(blacklist: T.unsafe(nil), whitelist: T.unsafe(nil)); end
  end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#5
class RubyLLM::MCP::Annotation
  # @return [Annotation] a new instance of Annotation
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#8
  def initialize(annotation); end

  # Returns the value of attribute destructive_hint.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#6
  def destructive_hint; end

  # Returns the value of attribute idempotent_hint.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#6
  def idempotent_hint; end

  # Returns the value of attribute open_world_hint.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#6
  def open_world_hint; end

  # Returns the value of attribute read_only_hint.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#6
  def read_only_hint; end

  # Returns the value of attribute title.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#6
  def title; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#16
  def to_h; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/attachment.rb#5
class RubyLLM::MCP::Attachment < ::RubyLLM::Attachment
  # @return [Attachment] a new instance of Attachment
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/attachment.rb#8
  def initialize(content, mime_type); end

  # Returns the value of attribute content.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/attachment.rb#6
  def content; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/attachment.rb#13
  def encoded; end

  # Returns the value of attribute mime_type.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/attachment.rb#6
  def mime_type; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#7
class RubyLLM::MCP::Client
  extend ::Forwardable

  # @return [Client] a new instance of Client
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#13
  def initialize(name:, transport_type:, start: T.unsafe(nil), request_timeout: T.unsafe(nil), config: T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def alive?(*args, **_arg1, &block); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#191
  def as_json; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def capabilities(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def client_capabilities(*args, **_arg1, &block); end

  # Returns the value of attribute config.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#10
  def config; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#182
  def elicitation_enabled?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#146
  def human_in_the_loop?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#209
  def inspect; end

  # Returns the value of attribute linked_resources.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#11
  def linked_resources; end

  # Sets the attribute linked_resources
  #
  # @param value the value to set the attribute linked_resources to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#11
  def linked_resources=(_arg0); end

  # Returns the value of attribute log_level.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#10
  def log_level; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#159
  def logging_enabled?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#155
  def logging_handler_enabled?; end

  # Returns the value of attribute name.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#10
  def name; end

  # Returns the value of attribute on.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#10
  def on; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#186
  def on_elicitation(&block); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#150
  def on_human_in_the_loop(&block); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#163
  def on_logging(level: T.unsafe(nil), &block); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#141
  def on_progress(&block); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#177
  def on_sampling(&block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def ping(*args, **_arg1, &block); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#127
  def prompt(name, refresh: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#116
  def prompts(refresh: T.unsafe(nil)); end

  # Returns the value of attribute request_timeout.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#10
  def request_timeout; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#133
  def reset_prompts!; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#112
  def reset_resource_templates!; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#91
  def reset_resources!; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#69
  def reset_tools!; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#85
  def resource(name, refresh: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#106
  def resource_template(name, refresh: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#95
  def resource_templates(refresh: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#73
  def resources(refresh: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#48
  def restart!; end

  # Returns the value of attribute roots.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#10
  def roots; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#173
  def sampling_callback_enabled?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#40
  def start; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#44
  def stop; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#191
  def to_h; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#63
  def tool(name, refresh: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#52
  def tools(refresh: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#137
  def tracking_progress?; end

  # Returns the value of attribute transport_type.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#10
  def transport_type; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#229
  def build_map(raw_data, klass, with_prefix: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#221
  def fetch(cache_key, refresh); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#240
  def include_linked_resources(resources); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#215
  def setup_coordinator; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#256
  def setup_event_handlers; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#248
  def setup_roots; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/client.rb#252
  def setup_sampling; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/completion.rb#5
class RubyLLM::MCP::Completion
  # @return [Completion] a new instance of Completion
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/completion.rb#8
  def initialize(argument:, values:, total:, has_more:); end

  # Returns the value of attribute argument.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/completion.rb#6
  def argument; end

  # Returns the value of attribute has_more.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/completion.rb#6
  def has_more; end

  # Returns the value of attribute total.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/completion.rb#6
  def total; end

  # Returns the value of attribute values.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/completion.rb#6
  def values; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#9
class RubyLLM::MCP::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#104
  def initialize; end

  # Returns the value of attribute config_path.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def config_path; end

  # Sets the attribute config_path
  #
  # @param value the value to set the attribute config_path to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def config_path=(_arg0); end

  # Returns the value of attribute has_support_complex_parameters.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def has_support_complex_parameters; end

  # Sets the attribute has_support_complex_parameters
  #
  # @param value the value to set the attribute has_support_complex_parameters to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def has_support_complex_parameters=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#152
  def inspect; end

  # Returns the value of attribute launch_control.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def launch_control; end

  # Sets the attribute launch_control
  #
  # @param value the value to set the attribute launch_control to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def launch_control=(_arg0); end

  # Returns the value of attribute log_file.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def log_file; end

  # Sets the attribute log_file
  #
  # @param value the value to set the attribute log_file to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def log_file=(_arg0); end

  # Returns the value of attribute log_level.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def log_level; end

  # Sets the attribute log_level
  #
  # @param value the value to set the attribute log_level to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def log_level=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#120
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#100
  def logger=(_arg0); end

  # Returns the value of attribute max_connections.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def max_connections; end

  # Sets the attribute max_connections
  #
  # @param value the value to set the attribute max_connections to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def max_connections=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#128
  def mcp_configuration; end

  # Sets the attribute mcp_configuration
  #
  # @param value the value to set the attribute mcp_configuration to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#100
  def mcp_configuration=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#147
  def on_elicitation(&block); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#137
  def on_human_in_the_loop(&block); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#142
  def on_logging(&block); end

  # Returns the value of attribute on_logging_level.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def on_logging_level; end

  # Sets the attribute on_logging_level
  #
  # @param value the value to set the attribute on_logging_level to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def on_logging_level=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#132
  def on_progress(&block); end

  # Returns the value of attribute pool_timeout.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def pool_timeout; end

  # Sets the attribute pool_timeout
  #
  # @param value the value to set the attribute pool_timeout to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def pool_timeout=(_arg0); end

  # Returns the value of attribute protocol_version.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def protocol_version; end

  # Sets the attribute protocol_version
  #
  # @param value the value to set the attribute protocol_version to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def protocol_version=(_arg0); end

  # Returns the value of attribute request_timeout.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def request_timeout; end

  # Sets the attribute request_timeout
  #
  # @param value the value to set the attribute request_timeout to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def request_timeout=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#109
  def reset!; end

  # Returns the value of attribute roots.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def roots; end

  # Sets the attribute roots
  #
  # @param value the value to set the attribute roots to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def roots=(_arg0); end

  # Returns the value of attribute sampling.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def sampling; end

  # Sets the attribute sampling
  #
  # @param value the value to set the attribute sampling to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#87
  def sampling=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#113
  def support_complex_parameters!; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#172
  def load_mcps_config; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#177
  def set_defaults; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#45
class RubyLLM::MCP::Configuration::ConfigFile
  # @return [ConfigFile] a new instance of ConfigFile
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#48
  def initialize(file_path); end

  # Returns the value of attribute file_path.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#46
  def file_path; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#52
  def parse; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#73
  def load_mcps_config(config); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#63
  def parse_config_file; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#102
RubyLLM::MCP::Configuration::REQUEST_TIMEOUT_DEFAULT = T.let(T.unsafe(nil), Integer)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#10
class RubyLLM::MCP::Configuration::Sampling
  # @return [Sampling] a new instance of Sampling
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#14
  def initialize; end

  # Returns the value of attribute enabled.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#11
  def enabled; end

  # Sets the attribute enabled
  #
  # @param value the value to set the attribute enabled to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#11
  def enabled=(_arg0); end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#32
  def enabled?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#22
  def guard(&block); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#27
  def preferred_model(&block); end

  # Sets the attribute preferred_model
  #
  # @param value the value to set the attribute preferred_model to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#12
  def preferred_model=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#18
  def reset!; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/configuration.rb#38
  def set_defaults; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/content.rb#5
class RubyLLM::MCP::Content < ::RubyLLM::Content
  # @return [Content] a new instance of Content
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/content.rb#8
  def initialize(text: T.unsafe(nil), attachments: T.unsafe(nil)); end

  # Returns the value of attribute attachments.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/content.rb#6
  def attachments; end

  # Returns the value of attribute content.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/content.rb#6
  def content; end

  # Returns the value of attribute text.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/content.rb#6
  def text; end

  # This is a workaround to allow the content object to be passed as the tool call
  # to return audio or image attachments.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/content.rb#15
  def to_s; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#7
class RubyLLM::MCP::Coordinator
  # @return [Coordinator] a new instance of Coordinator
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#10
  def initialize(client, transport_type:, config: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#100
  def alive?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#232
  def cancelled_notification(**args); end

  # Returns the value of attribute capabilities.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#8
  def capabilities; end

  # Returns the value of attribute client.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#8
  def client; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#262
  def client_capabilities; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#218
  def completion_prompt(**args); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#214
  def completion_resource(**args); end

  # Returns the value of attribute config.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#8
  def config; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#258
  def elicitation_response(**args); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#254
  def error_response(**args); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#210
  def execute_prompt(**args); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#144
  def execute_tool(**args); end

  # Notifications
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#228
  def initialize_notification; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#129
  def initialize_request; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#21
  def name; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#104
  def ping; end

  # Responses
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#242
  def ping_response(**args); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#120
  def process_notification(result); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#125
  def process_request(result); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#34
  def process_result(result); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#199
  def prompt_list(cursor: T.unsafe(nil)); end

  # Returns the value of attribute protocol_version.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#8
  def protocol_version; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#164
  def register_resource(resource); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#25
  def request(body, **options); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#169
  def resource_list(cursor: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#180
  def resource_read(**args); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#184
  def resource_template_list(cursor: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#195
  def resources_subscribe(**args); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#94
  def restart_transport; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#236
  def roots_list_change_notification; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#246
  def roots_list_response(**args); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#250
  def sampling_create_message_response(**args); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#222
  def set_logging(**args); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#52
  def start_transport; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#87
  def stop_transport; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#133
  def tool_list(cursor: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#282
  def transport; end

  # Returns the value of attribute transport_type.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#8
  def transport_type; end

  private

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/coordinator.rb#288
  def sampling_enabled?; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/elicitation.rb#7
class RubyLLM::MCP::Elicitation
  # @return [Elicitation] a new instance of Elicitation
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/elicitation.rb#14
  def initialize(coordinator, result); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/elicitation.rb#23
  def execute; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/elicitation.rb#37
  def message; end

  # Sets the attribute structured_response
  #
  # @param value the value to set the attribute structured_response to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/elicitation.rb#12
  def structured_response=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/elicitation.rb#41
  def validate_response; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/elicitation.rb#8
RubyLLM::MCP::Elicitation::ACCEPT_ACTION = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/elicitation.rb#9
RubyLLM::MCP::Elicitation::CANCEL_ACTION = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/elicitation.rb#10
RubyLLM::MCP::Elicitation::REJECT_ACTION = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/error.rb#5
class RubyLLM::MCP::Error
  # @return [Error] a new instance of Error
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/error.rb#6
  def initialize(error_data); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/error.rb#29
  def to_s; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/error.rb#12
  def type; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#5
module RubyLLM::MCP::Errors; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#6
class RubyLLM::MCP::Errors::BaseError < ::StandardError
  # @return [BaseError] a new instance of BaseError
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#9
  def initialize(message:); end

  # Returns the value of attribute message.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#7
  def message; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#15
module RubyLLM::MCP::Errors::Capabilities; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#16
class RubyLLM::MCP::Errors::Capabilities::CompletionNotAvailable < ::RubyLLM::MCP::Errors::BaseError; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#17
class RubyLLM::MCP::Errors::Capabilities::ResourceSubscribeNotAvailable < ::RubyLLM::MCP::Errors::BaseError; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#20
class RubyLLM::MCP::Errors::InvalidFormatError < ::RubyLLM::MCP::Errors::BaseError; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#22
class RubyLLM::MCP::Errors::InvalidProtocolVersionError < ::RubyLLM::MCP::Errors::BaseError; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#24
class RubyLLM::MCP::Errors::InvalidTransportType < ::RubyLLM::MCP::Errors::BaseError; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#26
class RubyLLM::MCP::Errors::ProgressHandlerNotAvailable < ::RubyLLM::MCP::Errors::BaseError; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#28
class RubyLLM::MCP::Errors::PromptArgumentError < ::RubyLLM::MCP::Errors::BaseError; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#30
class RubyLLM::MCP::Errors::ResponseError < ::RubyLLM::MCP::Errors::BaseError
  # @return [ResponseError] a new instance of ResponseError
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#33
  def initialize(message:, error:); end

  # Returns the value of attribute error.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#31
  def error; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#39
class RubyLLM::MCP::Errors::SessionExpiredError < ::RubyLLM::MCP::Errors::BaseError; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#41
class RubyLLM::MCP::Errors::TimeoutError < ::RubyLLM::MCP::Errors::BaseError
  # @return [TimeoutError] a new instance of TimeoutError
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#44
  def initialize(message:, request_id: T.unsafe(nil)); end

  # Returns the value of attribute request_id.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#42
  def request_id; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#50
class RubyLLM::MCP::Errors::TransportError < ::RubyLLM::MCP::Errors::BaseError
  # @return [TransportError] a new instance of TransportError
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#53
  def initialize(message:, code: T.unsafe(nil), error: T.unsafe(nil)); end

  # Returns the value of attribute code.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#51
  def code; end

  # Returns the value of attribute error.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#51
  def error; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#60
class RubyLLM::MCP::Errors::UnknownRequest < ::RubyLLM::MCP::Errors::BaseError; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/errors.rb#62
class RubyLLM::MCP::Errors::UnsupportedProtocolVersion < ::RubyLLM::MCP::Errors::BaseError; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/logging.rb#5
module RubyLLM::MCP::Logging; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/logging.rb#12
RubyLLM::MCP::Logging::ALERT = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/logging.rb#11
RubyLLM::MCP::Logging::CRITICAL = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/logging.rb#6
RubyLLM::MCP::Logging::DEBUG = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/logging.rb#13
RubyLLM::MCP::Logging::EMERGENCY = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/logging.rb#10
RubyLLM::MCP::Logging::ERROR = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/logging.rb#7
RubyLLM::MCP::Logging::INFO = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/logging.rb#8
RubyLLM::MCP::Logging::NOTICE = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/logging.rb#9
RubyLLM::MCP::Logging::WARNING = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#5
class RubyLLM::MCP::Notification
  # @return [Notification] a new instance of Notification
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#8
  def initialize(response); end

  # Returns the value of attribute params.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#6
  def params; end

  # Returns the value of attribute type.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#6
  def type; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/notification_handler.rb#5
class RubyLLM::MCP::NotificationHandler
  # @return [NotificationHandler] a new instance of NotificationHandler
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notification_handler.rb#8
  def initialize(coordinator); end

  # Returns the value of attribute client.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notification_handler.rb#6
  def client; end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notification_handler.rb#6
  def coordinator; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notification_handler.rb#13
  def execute(notification); end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notification_handler.rb#57
  def default_process_logging_message(notification, logger: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notification_handler.rb#42
  def process_logging_message(notification); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notification_handler.rb#50
  def process_progress_message(notification); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notification_handler.rb#36
  def process_resource_updated(notification); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notification_handler.rb#78
  def process_unknown_notification(notification); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/cancelled.rb#5
module RubyLLM::MCP::Notifications; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/cancelled.rb#6
class RubyLLM::MCP::Notifications::Cancelled
  # @return [Cancelled] a new instance of Cancelled
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/cancelled.rb#7
  def initialize(coordinator, request_id:, reason:); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/cancelled.rb#13
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/cancelled.rb#19
  def cancelled_notification_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/initialize.rb#6
class RubyLLM::MCP::Notifications::Initialize
  # @return [Initialize] a new instance of Initialize
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/initialize.rb#7
  def initialize(coordinator); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/initialize.rb#11
  def call; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/initialize.rb#15
  def notification_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/roots_list_change.rb#6
class RubyLLM::MCP::Notifications::RootsListChange
  # @return [RootsListChange] a new instance of RootsListChange
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/roots_list_change.rb#7
  def initialize(coordinator); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/roots_list_change.rb#11
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/notifications/roots_list_change.rb#17
  def roots_list_change_notification_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#7
class RubyLLM::MCP::Parameter < ::RubyLLM::Parameter
  # @return [Parameter] a new instance of Parameter
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#10
  def initialize(name, type: T.unsafe(nil), desc: T.unsafe(nil), required: T.unsafe(nil), default: T.unsafe(nil), union_type: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#21
  def as_json(*_args); end

  # Returns the value of attribute default.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#8
  def default; end

  # Sets the attribute default
  #
  # @param value the value to set the attribute default to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#8
  def default=(_arg0); end

  # Returns the value of attribute enum.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#8
  def enum; end

  # Sets the attribute enum
  #
  # @param value the value to set the attribute enum to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#8
  def enum=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#17
  def item_type; end

  # Returns the value of attribute items.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#8
  def items; end

  # Sets the attribute items
  #
  # @param value the value to set the attribute items to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#8
  def items=(_arg0); end

  # Returns the value of attribute properties.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#8
  def properties; end

  # Sets the attribute properties
  #
  # @param value the value to set the attribute properties to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#8
  def properties=(_arg0); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#25
  def to_h; end

  # Returns the value of attribute union_type.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#8
  def union_type; end

  # Sets the attribute union_type
  #
  # @param value the value to set the attribute union_type to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/parameter.rb#8
  def union_type=(_arg0); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/progress.rb#5
class RubyLLM::MCP::Progress
  # @return [Progress] a new instance of Progress
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/progress.rb#8
  def initialize(coordinator, progress_handler, progress_data); end

  # Returns the value of attribute client.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/progress.rb#6
  def client; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/progress.rb#19
  def execute_progress_handler; end

  # Returns the value of attribute message.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/progress.rb#6
  def message; end

  # Returns the value of attribute progress.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/progress.rb#6
  def progress; end

  # Returns the value of attribute progress_token.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/progress.rb#6
  def progress_token; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/progress.rb#23
  def to_h; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/progress.rb#23
  def to_json; end

  # Returns the value of attribute total.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/progress.rb#6
  def total; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#5
class RubyLLM::MCP::Prompt
  # @return [Prompt] a new instance of Prompt
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#26
  def initialize(coordinator, prompt); end

  # Returns the value of attribute arguments.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#24
  def arguments; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#45
  def ask(chat, arguments: T.unsafe(nil), &_arg2); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#53
  def complete(argument, value, context: T.unsafe(nil)); end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#24
  def coordinator; end

  # Returns the value of attribute description.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#24
  def description; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#33
  def fetch(arguments = T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#37
  def include(chat, arguments: T.unsafe(nil)); end

  # Returns the value of attribute name.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#24
  def name; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#45
  def say(chat, arguments: T.unsafe(nil), &_arg2); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#70
  def to_h; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#70
  def to_json; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#108
  def create_content_for_message(content); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#82
  def fetch_prompt_messages(arguments); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#121
  def parse_arguments(arguments); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#100
  def validate_arguments!(incoming_arguments); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#6
class RubyLLM::MCP::Prompt::Argument
  # @return [Argument] a new instance of Argument
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#9
  def initialize(name:, description:, required:); end

  # Returns the value of attribute description.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#7
  def description; end

  # Returns the value of attribute name.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#7
  def name; end

  # Returns the value of attribute required.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#7
  def required; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/prompt.rb#15
  def to_h; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#5
module RubyLLM::MCP::Protocol
  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#29
  def default_negotiated_version; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#25
  def latest_version; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#17
  def supported_version?(version); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#21
  def supported_versions; end

  class << self
    # source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#29
    def default_negotiated_version; end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#25
    def latest_version; end

    # @return [Boolean]
    #
    # source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#17
    def supported_version?(version); end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#21
    def supported_versions; end
  end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#9
RubyLLM::MCP::Protocol::DEFAULT_NEGOTIATED_PROTOCOL_VERSION = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#8
RubyLLM::MCP::Protocol::LATEST_PROTOCOL_VERSION = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/protocol.rb#10
RubyLLM::MCP::Protocol::SUPPORTED_PROTOCOL_VERSIONS = T.let(T.unsafe(nil), Array)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#5
module RubyLLM::MCP::Providers; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#6
module RubyLLM::MCP::Providers::Anthropic; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#7
module RubyLLM::MCP::Providers::Anthropic::ComplexParameterSupport
  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#20
  def build_properties(param); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#10
  def clean_parameters(parameters); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#16
  def required_parameters(parameters); end

  class << self
    # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#20
    def build_properties(param); end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#10
    def clean_parameters(parameters); end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#16
    def required_parameters(parameters); end
  end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/gemini/complex_parameter_support.rb#6
module RubyLLM::MCP::Providers::Gemini; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/gemini/complex_parameter_support.rb#7
module RubyLLM::MCP::Providers::Gemini::ComplexParameterSupport
  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/gemini/complex_parameter_support.rb#19
  def build_properties(param); end

  # Format tool parameters for Gemini API
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/gemini/complex_parameter_support.rb#11
  def format_parameters(parameters); end

  class << self
    # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/gemini/complex_parameter_support.rb#19
    def build_properties(param); end

    # Format tool parameters for Gemini API
    #
    # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/gemini/complex_parameter_support.rb#11
    def format_parameters(parameters); end
  end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/openai/complex_parameter_support.rb#6
module RubyLLM::MCP::Providers::OpenAI; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/openai/complex_parameter_support.rb#7
module RubyLLM::MCP::Providers::OpenAI::ComplexParameterSupport
  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/openai/complex_parameter_support.rb#10
  def param_schema(param); end

  class << self
    # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/openai/complex_parameter_support.rb#10
    def param_schema(param); end
  end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_prompt.rb#5
module RubyLLM::MCP::Requests; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_prompt.rb#6
class RubyLLM::MCP::Requests::CompletionPrompt
  # @return [CompletionPrompt] a new instance of CompletionPrompt
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_prompt.rb#7
  def initialize(coordinator, name:, argument:, value:, context: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_prompt.rb#15
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_prompt.rb#40
  def format_context; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_prompt.rb#21
  def request_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_resource.rb#6
class RubyLLM::MCP::Requests::CompletionResource
  # @return [CompletionResource] a new instance of CompletionResource
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_resource.rb#7
  def initialize(coordinator, uri:, argument:, value:, context: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_resource.rb#15
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_resource.rb#40
  def format_context; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/completion_resource.rb#21
  def request_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/initialization.rb#6
class RubyLLM::MCP::Requests::Initialization
  # @return [Initialization] a new instance of Initialization
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/initialization.rb#7
  def initialize(coordinator); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/initialization.rb#11
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/initialization.rb#17
  def initialize_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/logging_set_level.rb#6
class RubyLLM::MCP::Requests::LoggingSetLevel
  # @return [LoggingSetLevel] a new instance of LoggingSetLevel
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/logging_set_level.rb#7
  def initialize(coordinator, level:); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/logging_set_level.rb#12
  def call; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/logging_set_level.rb#16
  def logging_set_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/ping.rb#6
class RubyLLM::MCP::Requests::Ping
  # @return [Ping] a new instance of Ping
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/ping.rb#7
  def initialize(coordinator); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/ping.rb#11
  def call; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/ping.rb#15
  def ping_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/prompt_call.rb#6
class RubyLLM::MCP::Requests::PromptCall
  # @return [PromptCall] a new instance of PromptCall
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/prompt_call.rb#7
  def initialize(coordinator, name:, arguments: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/prompt_call.rb#13
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/prompt_call.rb#19
  def request_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/prompt_list.rb#6
class RubyLLM::MCP::Requests::PromptList
  include ::RubyLLM::MCP::Requests::Shared::Pagination

  # @return [PromptList] a new instance of PromptList
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/prompt_list.rb#9
  def initialize(coordinator, cursor: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/prompt_list.rb#14
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/prompt_list.rb#21
  def request_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_list.rb#6
class RubyLLM::MCP::Requests::ResourceList
  include ::RubyLLM::MCP::Requests::Shared::Pagination

  # @return [ResourceList] a new instance of ResourceList
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_list.rb#9
  def initialize(coordinator, cursor: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_list.rb#14
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_list.rb#21
  def resource_list_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_read.rb#6
class RubyLLM::MCP::Requests::ResourceRead
  # @return [ResourceRead] a new instance of ResourceRead
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_read.rb#9
  def initialize(coordinator, uri:); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_read.rb#14
  def call; end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_read.rb#7
  def coordinator; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_read.rb#18
  def reading_resource_body(uri); end

  # Returns the value of attribute uri.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_read.rb#7
  def uri; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_template_list.rb#6
class RubyLLM::MCP::Requests::ResourceTemplateList
  include ::RubyLLM::MCP::Requests::Shared::Pagination

  # @return [ResourceTemplateList] a new instance of ResourceTemplateList
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_template_list.rb#9
  def initialize(coordinator, cursor: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_template_list.rb#14
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resource_template_list.rb#21
  def resource_template_list_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resources_subscribe.rb#6
class RubyLLM::MCP::Requests::ResourcesSubscribe
  # @return [ResourcesSubscribe] a new instance of ResourcesSubscribe
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resources_subscribe.rb#7
  def initialize(coordinator, uri:); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resources_subscribe.rb#12
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/resources_subscribe.rb#18
  def resources_subscribe_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/prompt_list.rb#0
module RubyLLM::MCP::Requests::Shared; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/shared/meta.rb#9
module RubyLLM::MCP::Requests::Shared::Meta
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/shared/meta.rb#10
  def merge_meta(body); end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/shared/meta.rb#25
  def generate_progress_token; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/shared/meta.rb#21
  def progress_token; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/shared/pagination.rb#7
module RubyLLM::MCP::Requests::Shared::Pagination
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/shared/pagination.rb#8
  def merge_pagination(body); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/tool_call.rb#6
class RubyLLM::MCP::Requests::ToolCall
  include ::RubyLLM::MCP::Requests::Shared::Meta

  # @return [ToolCall] a new instance of ToolCall
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/tool_call.rb#9
  def initialize(coordinator, name:, parameters: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/tool_call.rb#15
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/tool_call.rb#22
  def request_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/tool_list.rb#6
class RubyLLM::MCP::Requests::ToolList
  include ::RubyLLM::MCP::Requests::Shared::Pagination

  # @return [ToolList] a new instance of ToolList
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/tool_list.rb#9
  def initialize(coordinator, cursor: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/tool_list.rb#14
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/requests/tool_list.rb#21
  def tool_list_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#7
class RubyLLM::MCP::Resource
  # @return [Resource] a new instance of Resource
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#10
  def initialize(coordinator, resource); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#24
  def content; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#34
  def content_loaded?; end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#8
  def coordinator; end

  # Returns the value of attribute description.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#8
  def description; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#53
  def include(chat, **args); end

  # Returns the value of attribute mime_type.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#8
  def mime_type; end

  # Returns the value of attribute name.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#8
  def name; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#48
  def reset_content!; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#38
  def subscribe!; end

  # Returns the value of attribute subscribed.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#8
  def subscribed; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#62
  def to_content; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#73
  def to_h; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#73
  def to_json; end

  # Returns the value of attribute uri.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#8
  def uri; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#88
  def content_type; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#108
  def fetch_uri_content(uri); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource.rb#98
  def read_response(uri: T.unsafe(nil)); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#7
class RubyLLM::MCP::ResourceTemplate
  # @return [ResourceTemplate] a new instance of ResourceTemplate
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#10
  def initialize(coordinator, resource); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#36
  def complete(argument, value, context: T.unsafe(nil)); end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#8
  def coordinator; end

  # Returns the value of attribute description.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#8
  def description; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#18
  def fetch_resource(arguments: T.unsafe(nil)); end

  # Returns the value of attribute mime_type.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#8
  def mime_type; end

  # Returns the value of attribute name.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#8
  def name; end

  # Returns the value of attribute template.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#8
  def template; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#32
  def to_content(arguments: T.unsafe(nil)); end

  # Returns the value of attribute uri.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#8
  def uri; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#76
  def apply_template(uri, arguments); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#53
  def content_type; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#71
  def fetch_uri_content(uri); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/resource_template.rb#61
  def read_response(uri); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/response_handler.rb#5
class RubyLLM::MCP::ResponseHandler
  # @return [ResponseHandler] a new instance of ResponseHandler
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/response_handler.rb#8
  def initialize(coordinator); end

  # Returns the value of attribute client.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/response_handler.rb#6
  def client; end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/response_handler.rb#6
  def coordinator; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/response_handler.rb#13
  def execute(result); end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/response_handler.rb#55
  def handle_elicitation_response(result); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/response_handler.rb#35
  def handle_roots_response(result); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/response_handler.rb#44
  def handle_sampling_response(result); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/response_handler.rb#60
  def handle_unknown_request(result); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/elicitation.rb#5
module RubyLLM::MCP::Responses; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/elicitation.rb#6
class RubyLLM::MCP::Responses::Elicitation
  # @return [Elicitation] a new instance of Elicitation
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/elicitation.rb#7
  def initialize(coordinator, id:, action:, content:); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/elicitation.rb#14
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/elicitation.rb#20
  def elicitation_response_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/error.rb#6
class RubyLLM::MCP::Responses::Error
  # @return [Error] a new instance of Error
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/error.rb#7
  def initialize(coordinator, id:, message:, code: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/error.rb#14
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/error.rb#20
  def sampling_error_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/ping.rb#6
class RubyLLM::MCP::Responses::Ping
  # @return [Ping] a new instance of Ping
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/ping.rb#7
  def initialize(coordinator, id:); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/ping.rb#12
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/ping.rb#18
  def ping_response_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/roots_list.rb#6
class RubyLLM::MCP::Responses::RootsList
  # @return [RootsList] a new instance of RootsList
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/roots_list.rb#7
  def initialize(coordinator, roots:, id:); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/roots_list.rb#13
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/roots_list.rb#19
  def roots_list_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/sampling_create_message.rb#6
class RubyLLM::MCP::Responses::SamplingCreateMessage
  # @return [SamplingCreateMessage] a new instance of SamplingCreateMessage
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/sampling_create_message.rb#7
  def initialize(coordinator, id:, message:, model:); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/sampling_create_message.rb#14
  def call; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/sampling_create_message.rb#35
  def format_content(content); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/responses/sampling_create_message.rb#20
  def sampling_create_message_body; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#14
class RubyLLM::MCP::Result
  # @return [Result] a new instance of Result
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#24
  def initialize(response, session_id: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#38
  def elicitation?; end

  # Returns the value of attribute error.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#15
  def error; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#91
  def error?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#53
  def execution_error?; end

  # Returns the value of attribute id.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#15
  def id; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#99
  def inspect; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#63
  def matching_id?(request_id); end

  # Returns the value of attribute method.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#15
  def method; end

  # Returns the value of attribute next_cursor.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#15
  def next_cursor; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#71
  def next_cursor?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#45
  def notification; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#67
  def notification?; end

  # Returns the value of attribute params.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#15
  def params; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#38
  def ping?; end

  # @raise [Errors::ResponseError]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#57
  def raise_error!; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#75
  def request?; end

  # Returns the value of attribute response.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#15
  def response; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#79
  def response?; end

  # Returns the value of attribute result.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#15
  def result; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#38
  def roots?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#38
  def sampling?; end

  # Returns the value of attribute session_id.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#15
  def session_id; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#83
  def success?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#49
  def to_error; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#95
  def to_s; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#87
  def tool_success?; end

  # Returns the value of attribute result.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#15
  def value; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/result.rb#17
RubyLLM::MCP::Result::REQUEST_METHODS = T.let(T.unsafe(nil), Hash)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/roots.rb#5
class RubyLLM::MCP::Roots
  # @return [Roots] a new instance of Roots
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/roots.rb#8
  def initialize(paths: T.unsafe(nil), coordinator: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/roots.rb#13
  def active?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/roots.rb#17
  def add(path); end

  # Returns the value of attribute paths.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/roots.rb#6
  def paths; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/roots.rb#22
  def remove(path); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/roots.rb#38
  def to_h; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/roots.rb#27
  def to_request; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#5
class RubyLLM::MCP::Sample
  # @return [Sample] a new instance of Sample
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#38
  def initialize(result, coordinator); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#49
  def execute; end

  # Returns the value of attribute max_tokens.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#36
  def max_tokens; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#61
  def message; end

  # Returns the value of attribute model_preferences.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#36
  def model_preferences; end

  # Returns the value of attribute raw_messages.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#36
  def raw_messages; end

  # Returns the value of attribute system_prompt.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#36
  def system_prompt; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#65
  def to_h; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#65
  def to_json; end

  private

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#78
  def callback_guard_success?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#93
  def chat(model); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#128
  def create_content_for_message(content); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#121
  def create_message(message); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#106
  def preferred_model; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#140
  def system_message; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#6
class RubyLLM::MCP::Sample::Hint
  # @return [Hint] a new instance of Hint
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#9
  def initialize(model, model_preferences); end

  # Returns the value of attribute cost_priority.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#7
  def cost_priority; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#19
  def hints; end

  # Returns the value of attribute intelligence_priority.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#7
  def intelligence_priority; end

  # Returns the value of attribute model.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#7
  def model; end

  # Returns the value of attribute speed_priority.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#7
  def speed_priority; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#23
  def to_h; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/sample.rb#34
RubyLLM::MCP::Sample::REJECTED_MESSAGE = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#5
class RubyLLM::MCP::ServerCapabilities
  # @return [ServerCapabilities] a new instance of ServerCapabilities
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#8
  def initialize(capabilities = T.unsafe(nil)); end

  # Returns the value of attribute capabilities.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#6
  def capabilities; end

  # Sets the attribute capabilities
  #
  # @param value the value to set the attribute capabilities to.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#6
  def capabilities=(_arg0); end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#40
  def completion?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#44
  def logging?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#32
  def prompt_list?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#36
  def prompt_list_changes?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#20
  def resource_subscribe?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#12
  def resources_list?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#16
  def resources_list_changes?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#24
  def tools_list?; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/server_capabilities.rb#28
  def tools_list_changes?; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#27
class RubyLLM::MCP::Tool < ::RubyLLM::Tool
  # @return [Tool] a new instance of Tool
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#30
  def initialize(coordinator, tool_response, with_prefix: T.unsafe(nil)); end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#28
  def coordinator; end

  # Returns the value of attribute description.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#28
  def description; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#46
  def display_name; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#50
  def execute(**params); end

  # Returns the value of attribute name.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#28
  def name; end

  # Returns the value of attribute parameters.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#28
  def parameters; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#82
  def to_h; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#82
  def to_json; end

  # Returns the value of attribute tool_response.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#28
  def tool_response; end

  # Returns the value of attribute with_prefix.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#28
  def with_prefix; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#156
  def create_content_for_message(content); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#95
  def create_parameters(schema); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#191
  def format_name(name); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#129
  def process_parameter(key, param_data, lifted_type: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/tool.rb#114
  def process_union_parameter(key, param_data); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#5
class RubyLLM::MCP::Transport
  extend ::Forwardable

  # @return [Transport] a new instance of Transport
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#25
  def initialize(transport_type, coordinator, config:); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def alive?(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def close(*args, **_arg1, &block); end

  # Returns the value of attribute config.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#23
  def config; end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#23
  def coordinator; end

  # Returns the value of attribute pid.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#23
  def pid; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def request(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def set_protocol_version(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def start(*args, **_arg1, &block); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#34
  def transport_protocol; end

  # Returns the value of attribute transport_type.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#23
  def transport_type; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#46
  def build_transport; end

  class << self
    # source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#11
    def register_transport(transport_type, transport_class); end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#7
    def transports; end
  end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/transport.rb#0
module RubyLLM::MCP::Transports; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#30
class RubyLLM::MCP::Transports::OAuthOptions
  # @return [OAuthOptions] a new instance of OAuthOptions
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#33
  def initialize(issuer:, client_id:, client_secret:, scopes:); end

  # Returns the value of attribute client_id.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#31
  def client_id; end

  # Returns the value of attribute client_secret.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#31
  def client_secret; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#40
  def enabled?; end

  # Returns the value of attribute issuer.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#31
  def issuer; end

  # Returns the value of attribute scope.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#31
  def scope; end
end

# Configuration options for reconnection behavior
#
# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#13
class RubyLLM::MCP::Transports::ReconnectionOptions
  # @return [ReconnectionOptions] a new instance of ReconnectionOptions
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#17
  def initialize(max_reconnection_delay: T.unsafe(nil), initial_reconnection_delay: T.unsafe(nil), reconnection_delay_grow_factor: T.unsafe(nil), max_retries: T.unsafe(nil)); end

  # Returns the value of attribute initial_reconnection_delay.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#14
  def initial_reconnection_delay; end

  # Returns the value of attribute max_reconnection_delay.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#14
  def max_reconnection_delay; end

  # Returns the value of attribute max_retries.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#14
  def max_retries; end

  # Returns the value of attribute reconnection_delay_grow_factor.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#14
  def reconnection_delay_grow_factor; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#12
class RubyLLM::MCP::Transports::SSE
  include ::RubyLLM::MCP::Transports::Support::Timeout

  # @return [SSE] a new instance of SSE
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#17
  def initialize(url:, coordinator:, request_timeout:, version: T.unsafe(nil), headers: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#83
  def alive?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#94
  def close; end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#15
  def coordinator; end

  # Returns the value of attribute headers.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#15
  def headers; end

  # Returns the value of attribute id.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#15
  def id; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#48
  def request(body, add_id: T.unsafe(nil), wait_for_response: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#101
  def set_protocol_version(version); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#87
  def start; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#207
  def handle_connection_error(message, error); end

  # @raise [Errors::TransportError]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#215
  def handle_httpx_error_response!(response, context:); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#163
  def listen_for_events; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#277
  def parse_event(raw); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#234
  def process_event(raw_event); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#107
  def send_request(body, request_id); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#147
  def set_message_endpoint(endpoint); end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#159
  def sse_thread_running?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#124
  def start_sse_listener; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#169
  def stream_events_from_server; end
end

# Options for starting SSE connections
#
# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#46
class RubyLLM::MCP::Transports::StartSSEOptions
  # @return [StartSSEOptions] a new instance of StartSSEOptions
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#49
  def initialize(resumption_token: T.unsafe(nil), on_resumption_token: T.unsafe(nil), replay_message_id: T.unsafe(nil)); end

  # Returns the value of attribute on_resumption_token.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#47
  def on_resumption_token; end

  # Returns the value of attribute replay_message_id.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#47
  def replay_message_id; end

  # Returns the value of attribute resumption_token.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#47
  def resumption_token; end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#11
class RubyLLM::MCP::Transports::Stdio
  include ::RubyLLM::MCP::Transports::Support::Timeout

  # @return [Stdio] a new instance of Stdio
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#16
  def initialize(command:, coordinator:, request_timeout:, args: T.unsafe(nil), env: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#72
  def alive?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#81
  def close; end

  # Returns the value of attribute command.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#14
  def command; end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#14
  def coordinator; end

  # Returns the value of attribute id.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#14
  def id; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#33
  def request(body, add_id: T.unsafe(nil), wait_for_response: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#128
  def set_protocol_version(version); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#76
  def start; end

  # Returns the value of attribute stderr.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#14
  def stderr; end

  # Returns the value of attribute stdin.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#14
  def stdin; end

  # Returns the value of attribute stdout.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#14
  def stdout; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#206
  def process_response(line); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#147
  def restart_process; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#134
  def start_process; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#152
  def start_reader_thread; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/stdio.rb#180
  def start_stderr_thread; end
end

# Main StreamableHTTP transport class
#
# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#57
class RubyLLM::MCP::Transports::StreamableHTTP
  include ::RubyLLM::MCP::Transports::Support::Timeout

  # @return [StreamableHTTP] a new instance of StreamableHTTP
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#62
  def initialize(url:, request_timeout:, coordinator:, headers: T.unsafe(nil), reconnection: T.unsafe(nil), version: T.unsafe(nil), oauth: T.unsafe(nil), rate_limit: T.unsafe(nil), reconnection_options: T.unsafe(nil), session_id: T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#133
  def alive?; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#137
  def close; end

  # Returns the value of attribute coordinator.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#60
  def coordinator; end

  # Returns the value of attribute protocol_version.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#60
  def protocol_version; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#108
  def request(body, add_id: T.unsafe(nil), wait_for_response: T.unsafe(nil)); end

  # Returns the value of attribute session_id.
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#60
  def session_id; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#147
  def set_protocol_version(version); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#143
  def start; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#230
  def active_clients_count; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#546
  def add_on_response_body_chunk_callback(client, options); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#260
  def build_common_headers; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#577
  def calculate_reconnection_delay(attempt); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#692
  def cleanup_connection; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#669
  def cleanup_sse_resources; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#222
  def close_client(client); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#236
  def create_connection; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#523
  def create_connection_with_sse_callbacks(options, headers); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#304
  def create_connection_with_streaming_callbacks(request_id); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#449
  def extract_resource_metadata_url(response); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#596
  def extract_sse_event(buffer); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#399
  def handle_accepted_response(original_message); end

  # @raise [Errors::TransportError]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#407
  def handle_client_error(response); end

  # @raise [Errors::TransportError]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#182
  def handle_httpx_error_response!(response, context:, allow_eof_for_sse: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#337
  def handle_response(response, request_id, original_message); end

  # @raise [Errors::SessionExpiredError]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#442
  def handle_session_expired; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#367
  def handle_success_response(response, request_id, _original_message); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#603
  def parse_sse_event(raw); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#585
  def process_sse_buffer_events(buffer, _request_id); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#620
  def process_sse_event(raw_event, replay_message_id); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#209
  def register_client(client); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#281
  def send_http_request(body, request_id, is_initialization: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#271
  def setup_response_queue(request_id, wait_for_response); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#470
  def start_sse(options); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#458
  def start_sse_stream(options = T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#153
  def terminate_session; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#216
  def unregister_client(client); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/streamable_http.rb#658
  def wait_for_response_with_timeout(request_id, response_queue); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/sse.rb#0
module RubyLLM::MCP::Transports::Support; end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/http_client.rb#9
class RubyLLM::MCP::Transports::Support::HTTPClient
  class << self
    # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/http_client.rb#16
    def build_connection; end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/http_client.rb#12
    def connection; end
  end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/http_client.rb#10
RubyLLM::MCP::Transports::Support::HTTPClient::CONNECTION_KEY = T.let(T.unsafe(nil), Symbol)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/rate_limit.rb#7
class RubyLLM::MCP::Transports::Support::RateLimit
  # @return [RateLimit] a new instance of RateLimit
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/rate_limit.rb#8
  def initialize(limit: T.unsafe(nil), interval: T.unsafe(nil)); end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/rate_limit.rb#24
  def add; end

  # @return [Boolean]
  #
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/rate_limit.rb#15
  def exceeded?; end

  private

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/rate_limit.rb#35
  def current_time; end

  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/rate_limit.rb#39
  def purge_old(now); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/timeout.rb#7
module RubyLLM::MCP::Transports::Support::Timeout
  # source://ruby_llm-mcp//lib/ruby_llm/mcp/transports/support/timeout.rb#8
  def with_timeout(seconds, request_id: T.unsafe(nil)); end
end

# source://ruby_llm-mcp//lib/ruby_llm/mcp/version.rb#5
RubyLLM::MCP::VERSION = T.let(T.unsafe(nil), String)

# source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#61
module RubyLLM::Providers::Anthropic::Tools
  private

  # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#92
  def clean_parameters(parameters); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#65
  def extract_tool_calls(data); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#10
  def find_tool_uses(blocks); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#14
  def format_tool_call(msg); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#29
  def format_tool_result(msg); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#45
  def format_tool_result_block(msg); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#36
  def format_tool_use_block(tool_call); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#53
  def function_for(tool); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#73
  def parse_tool_calls(content_blocks); end

  # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#101
  def required_parameters(parameters); end

  class << self
    # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#62
    def clean_parameters(parameters); end

    # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#65
    def extract_tool_calls(data); end

    # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#10
    def find_tool_uses(blocks); end

    # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#14
    def format_tool_call(msg); end

    # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#29
    def format_tool_result(msg); end

    # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#45
    def format_tool_result_block(msg); end

    # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#36
    def format_tool_use_block(tool_call); end

    # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#53
    def function_for(tool); end

    # source://ruby_llm/1.6.4/lib/ruby_llm/providers/anthropic/tools.rb#73
    def parse_tool_calls(content_blocks); end

    # source://ruby_llm-mcp//lib/ruby_llm/mcp/providers/anthropic/complex_parameter_support.rb#66
    def required_parameters(parameters); end
  end
end

class RubyLLM::Providers::Gemini < ::RubyLLM::Provider
  extend ::RubyLLM::MCP::Providers::Gemini::ComplexParameterSupport
end

class RubyLLM::Providers::OpenAI < ::RubyLLM::Provider
  extend ::RubyLLM::MCP::Providers::OpenAI::ComplexParameterSupport
end
